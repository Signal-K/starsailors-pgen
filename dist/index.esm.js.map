{"version":3,"file":"index.esm.js","sources":["../src/utils/planet-config.ts","../src/utils/shaders/vertex-shader.ts","../src/utils/shaders/fragment-shader.ts","../src/components/Planet.tsx","../src/utils/utils.ts","../src/components/ui/tabs.tsx","../src/components/ui/slider.tsx","../src/components/ui/label.tsx","../src/components/ui/switch.tsx","../src/components/ui/button.tsx","../src/components/ui/checkbox.tsx","../src/components/ui/popover.tsx","../src/components/ui/input.tsx","../src/components/ColorPicker.tsx","../src/components/SettingsPanel.tsx","../src/components/PlanetViewer.tsx","../src/components/SimplePlanetMesh.tsx","../src/components/ui/select.tsx","../src/components/SimplePlanetSettings.tsx","../src/components/SimplePlanetViewer.tsx","../src/utils/noise.ts"],"sourcesContent":["export interface PlanetConfig {\n  type: \"terrestrial\" | \"gaseous\"\n  seed: number\n  radius: number\n  temperature: number // Now in Kelvin\n  biomass: number\n  mass: number\n  terrainRoughness: number\n  liquidHeight: number\n  volcanicActivity: number\n  continentSize: number\n  continentCount: number\n  noiseScale: number\n  debugMode?: boolean\n  visibleTerrains: {\n    ocean: boolean\n    beach: boolean\n    lowland: boolean\n    midland: boolean\n    highland: boolean\n    mountain: boolean\n    snow: boolean\n  }\n  colors: {\n    atmosphere: string\n    ocean: string\n    oceanPattern: string\n    beach: string\n    lowland: string\n    midland: string\n    highland: string\n    mountain: string\n    snow: string\n  }\n}\n\nexport const defaultPlanetConfig: PlanetConfig = {\n  type: \"terrestrial\",\n  seed: Math.floor(Math.random() * 10000),\n  radius: 1.0,\n  temperature: 288, // Earth average in Kelvin (15Â°C)\n  biomass: 0.7,\n  mass: 1.0,\n  terrainRoughness: 0.6,\n  liquidHeight: 0.55,\n  volcanicActivity: 0.2,\n  continentSize: 0.5,\n  continentCount: 5,\n  noiseScale: 1.0,\n  debugMode: false,\n  visibleTerrains: {\n    ocean: true,\n    beach: true,\n    lowland: true,\n    midland: true,\n    highland: true,\n    mountain: true,\n    snow: true,\n  },\n  colors: {\n    atmosphere: \"#87CEEB\",\n    ocean: \"#1E90FF\",\n    oceanPattern: \"#1E7FFF\",\n    beach: \"#F0E68C\",\n    lowland: \"#32CD32\",\n    midland: \"#228B22\",\n    highland: \"#8B4513\",\n    mountain: \"#A0A0A0\",\n    snow: \"#FFFFFF\",\n  },\n}\n\n// Simple planet presets using the full PlanetConfig\nexport const simplePlanetPresets: Record<string, PlanetConfig> = {\n  earth: {\n    type: \"terrestrial\",\n    seed: 1234,\n    radius: 1.0,\n    temperature: 288,\n    biomass: 0.7,\n    mass: 1.0,\n    terrainRoughness: 0.6,\n    liquidHeight: 0.55,\n    volcanicActivity: 0.2,\n    continentSize: 0.5,\n    continentCount: 5,\n    noiseScale: 1.0,\n    debugMode: false,\n    visibleTerrains: {\n      ocean: true,\n      beach: true,\n      lowland: true,\n      midland: true,\n      highland: true,\n      mountain: true,\n      snow: true,\n    },\n    colors: {\n      atmosphere: \"#87CEEB\",\n      ocean: \"#1E90FF\",\n      oceanPattern: \"#1E7FFF\",\n      beach: \"#F0E68C\",\n      lowland: \"#32CD32\",\n      midland: \"#228B22\",\n      highland: \"#8B4513\",\n      mountain: \"#A0A0A0\",\n      snow: \"#FFFFFF\",\n    },\n  },\n  mars: {\n    type: \"terrestrial\",\n    seed: 5678,\n    radius: 0.5,\n    temperature: 210, // Mars average\n    biomass: 0.0,\n    mass: 0.1,\n    terrainRoughness: 0.8,\n    liquidHeight: 0.3,\n    volcanicActivity: 0.1,\n    continentSize: 0.8,\n    continentCount: 2,\n    noiseScale: 1.2,\n    debugMode: false,\n    visibleTerrains: {\n      ocean: true,\n      beach: true,\n      lowland: true,\n      midland: true,\n      highland: true,\n      mountain: true,\n      snow: true,\n    },\n    colors: {\n      atmosphere: \"#CD853F\",\n      ocean: \"#8B4513\",\n      oceanPattern: \"#A0522D\",\n      beach: \"#CD853F\",\n      lowland: \"#A0522D\",\n      midland: \"#8B4513\",\n      highland: \"#8B0000\",\n      mountain: \"#696969\",\n      snow: \"#F5F5DC\",\n    },\n  },\n  jupiter: {\n    type: \"gaseous\",\n    seed: 9012,\n    radius: 2.5,\n    temperature: 165, // Jupiter average\n    biomass: 0.0,\n    mass: 8.0,\n    terrainRoughness: 0.3,\n    liquidHeight: 0.0,\n    volcanicActivity: 0.0,\n    continentSize: 0.0,\n    continentCount: 0,\n    noiseScale: 0.5,\n    debugMode: false,\n    visibleTerrains: {\n      ocean: true,\n      beach: true,\n      lowland: true,\n      midland: true,\n      highland: true,\n      mountain: true,\n      snow: true,\n    },\n    colors: {\n      atmosphere: \"#DAA520\",\n      ocean: \"#B8860B\",\n      oceanPattern: \"#8B7355\",\n      beach: \"#DAA520\",\n      lowland: \"#B8860B\",\n      midland: \"#8B7355\",\n      highland: \"#8B4513\",\n      mountain: \"#654321\",\n      snow: \"#F5DEB3\",\n    },\n  },\n  neptune: {\n    type: \"gaseous\",\n    seed: 3456,\n    radius: 2.0,\n    temperature: 72, // Neptune average\n    biomass: 0.0,\n    mass: 5.0,\n    terrainRoughness: 0.2,\n    liquidHeight: 0.0,\n    volcanicActivity: 0.0,\n    continentSize: 0.0,\n    continentCount: 0,\n    noiseScale: 0.3,\n    debugMode: false,\n    visibleTerrains: {\n      ocean: true,\n      beach: true,\n      lowland: true,\n      midland: true,\n      highland: true,\n      mountain: true,\n      snow: true,\n    },\n    colors: {\n      atmosphere: \"#4169E1\",\n      ocean: \"#0000CD\",\n      oceanPattern: \"#191970\",\n      beach: \"#4169E1\",\n      lowland: \"#0000CD\",\n      midland: \"#191970\",\n      highland: \"#000080\",\n      mountain: \"#483D8B\",\n      snow: \"#E6E6FA\",\n    },\n  },\n  venus: {\n    type: \"terrestrial\",\n    seed: 7890,\n    radius: 0.9,\n    temperature: 737, // Venus average\n    biomass: 0.0,\n    mass: 0.8,\n    terrainRoughness: 0.4,\n    liquidHeight: 0.0,\n    volcanicActivity: 0.8,\n    continentSize: 0.6,\n    continentCount: 3,\n    noiseScale: 0.8,\n    debugMode: false,\n    visibleTerrains: {\n      ocean: true,\n      beach: true,\n      lowland: true,\n      midland: true,\n      highland: true,\n      mountain: true,\n      snow: true,\n    },\n    colors: {\n      atmosphere: \"#FFA500\",\n      ocean: \"#FF4500\",\n      oceanPattern: \"#FF6347\",\n      beach: \"#FFA500\",\n      lowland: \"#FF8C00\",\n      midland: \"#FF4500\",\n      highland: \"#8B0000\",\n      mountain: \"#2F4F4F\",\n      snow: \"#D3D3D3\",\n    },\n  },\n}\n\n// Function to determine liquid type based on temperature\nexport function getLiquidType(temperature: number): {\n  name: string\n  color: string\n  patternColor: string\n} {\n  // Temperature ranges in Kelvin\n  if (temperature < 90) {\n    // Liquid nitrogen (63K to 77K)\n    return {\n      name: \"Liquid Nitrogen\",\n      color: \"#D6E7FF\",\n      patternColor: \"#C0D6FF\",\n    }\n  } else if (temperature < 120) {\n    // Liquid methane (90K to 112K)\n    return {\n      name: \"Liquid Methane\",\n      color: \"#A2CDB0\",\n      patternColor: \"#8EBDA0\",\n    }\n  } else if (temperature < 373) {\n    // Water (273K to 373K)\n    return {\n      name: \"Water\",\n      color: \"#1E90FF\",\n      patternColor: \"#1E7FFF\",\n    }\n  } else if (temperature < 600) {\n    // Sulfuric acid (283K to 610K)\n    return {\n      name: \"Sulfuric Acid\",\n      color: \"#D6C562\",\n      patternColor: \"#C4B250\",\n    }\n  } else {\n    // Molten silicates/lava (>1000K)\n    return {\n      name: \"Molten Rock\",\n      color: \"#FF4500\",\n      patternColor: \"#FF2400\",\n    }\n  }\n}\n\n// Function to adjust terrain colors based on temperature\nexport function getTemperatureAdjustedColors(\n  temperature: number,\n  biomass: number,\n): {\n  beach: string\n  lowland: string\n  midland: string\n  highland: string\n  mountain: string\n  snow: string\n} {\n  // Base colors\n  let beach = \"#F0E68C\" // Default sandy beach\n  let lowland = \"#32CD32\" // Default green lowland\n  let midland = \"#228B22\" // Default forest green\n  let highland = \"#8B4513\" // Default brown\n  let mountain = \"#A0A0A0\" // Default gray\n  let snow = \"#FFFFFF\" // Default white\n\n  // Cold planet (< 240K)\n  if (temperature < 240) {\n    beach = \"#E0E0E0\" // Icy shore\n    lowland = \"#E8E8F0\" // Light ice\n    midland = \"#C8D8E0\" // Bluish ice\n    highland = \"#A8B8C0\" // Darker ice\n    mountain = \"#889098\" // Dark gray\n    snow = \"#FFFFFF\" // Pure white\n  }\n  // Cool planet (240K to 280K)\n  else if (temperature < 280) {\n    beach = \"#D8D8C0\" // Cool sand\n    lowland = \"#C0D8C0\" // Tundra\n    midland = \"#A0C0A0\" // Sparse vegetation\n    highland = \"#909080\" // Rocky tundra\n    mountain = \"#808080\" // Gray rock\n    snow = \"#FFFFFF\" // White snow\n  }\n  // Temperate planet (280K to 310K)\n  else if (temperature < 310) {\n    // Adjust based on biomass\n    const bioFactor = Math.min(biomass * 1.5, 1.0)\n\n    beach = \"#F0E68C\" // Sandy beach\n    lowland = bioFactor > 0.3 ? \"#32CD32\" : \"#C2CC70\" // Green if biomass, otherwise yellowish\n    midland = bioFactor > 0.3 ? \"#228B22\" : \"#A0A060\" // Forest if biomass, otherwise scrubland\n    highland = \"#8B4513\" // Brown\n    mountain = \"#A0A0A0\" // Gray\n    snow = \"#FFFFFF\" // White\n  }\n  // Hot planet (310K to 400K)\n  else if (temperature < 400) {\n    beach = \"#F8E0A0\" // Light sand\n    lowland = biomass > 0.4 ? \"#74A662\" : \"#D8C878\" // Either vegetation or desert\n    midland = biomass > 0.4 ? \"#567D46\" : \"#C0A060\" // Either vegetation or desert\n    highland = \"#B89060\" // Light brown\n    mountain = \"#A89080\" // Reddish rock\n    snow = temperature > 350 ? \"#F0F0F0\" : \"#FFFFFF\" // Slightly off-white at higher temps\n  }\n  // Very hot planet (400K to 600K)\n  else if (temperature < 600) {\n    beach = \"#F8D080\" // Orange sand\n    lowland = \"#E0B060\" // Desert\n    midland = \"#C09050\" // Dark desert\n    highland = \"#A07040\" // Reddish brown\n    mountain = \"#805030\" // Dark red rock\n    snow = \"#E8E8E8\" // Off-white (salt flats)\n  }\n  // Extremely hot planet (>600K)\n  else {\n    beach = \"#FF9060\" // Orange-red\n    lowland = \"#E07040\" // Reddish\n    midland = \"#C05020\" // Dark red\n    highland = \"#A03010\" // Very dark red\n    mountain = \"#802000\" // Almost black-red\n    snow = \"#D0D0D0\" // Light gray (ash)\n  }\n\n  return { beach, lowland, midland, highland, mountain, snow }\n}\n\n// Auto-determine planet type based on mass and radius\nexport function getAutoType(mass: number, radius: number): \"terrestrial\" | \"gaseous\" {\n  return mass > 7.5 || radius > 2.5 ? \"gaseous\" : \"terrestrial\"\n}\n\n// Get simplified colors for simple planet interface (maps to primary terrain colors)\nexport function getSimplifiedColors(config: PlanetConfig): {\n  primary: string\n  secondary: string\n  accent: string\n} {\n  if (config.type === \"gaseous\") {\n    return {\n      primary: config.colors.atmosphere,\n      secondary: config.colors.ocean,\n      accent: config.colors.oceanPattern,\n    }\n  } else {\n    return {\n      primary: config.colors.ocean, // Water/ocean\n      secondary: config.colors.lowland, // Land\n      accent: config.colors.highland, // Mountains\n    }\n  }\n}\n\n// Update full config from simplified colors\nexport function updateFromSimplifiedColors(\n  config: PlanetConfig,\n  colors: { primary: string; secondary: string; accent: string },\n): Partial<PlanetConfig> {\n  if (config.type === \"gaseous\") {\n    return {\n      colors: {\n        ...config.colors,\n        atmosphere: colors.primary,\n        ocean: colors.secondary,\n        oceanPattern: colors.accent,\n        beach: colors.primary,\n        lowland: colors.secondary,\n        midland: colors.accent,\n        highland: colors.primary,\n        mountain: colors.secondary,\n        snow: colors.accent,\n      },\n    }\n  } else {\n    return {\n      colors: {\n        ...config.colors,\n        ocean: colors.primary,\n        oceanPattern: colors.primary,\n        lowland: colors.secondary,\n        midland: colors.secondary,\n        highland: colors.accent,\n        mountain: colors.accent,\n      },\n    }\n  }\n}\n\n// Create a simplified config interface for the simple planet viewer\nexport function createSimplifiedConfig(config: PlanetConfig) {\n  return {\n    type: config.type,\n    radius: config.radius,\n    mass: config.mass,\n    density: config.mass / ((config.radius ** 3 * Math.PI * 4) / 3),\n    seed: config.seed,\n    colors: getSimplifiedColors(config),\n    // Include full config for the mesh to use\n    fullConfig: config,\n  }\n}","export const vertexShader = `\n  varying vec2 vUv;\n  varying vec3 vNormal;\n  varying vec3 vPosition;\n  varying float vElevation;\n  varying vec3 vOrigPosition;\n  \n  uniform float time;\n  uniform float surfaceRoughness;\n  uniform float volcanicActivity;\n  uniform float isGaseous;\n  uniform float seed;\n  uniform float continentSize;\n  uniform float continentCount;\n  uniform float noiseScale;\n  \n  // Simplex 3D Noise\n  vec4 permute(vec4 x){return mod(((x*34.0)+1.0)*x, 289.0);}\n  vec4 taylorInvSqrt(vec4 r){return 1.79284291400159 - 0.85373472095314 * r;}\n\n  float snoise(vec3 v){ \n    const vec2 C = vec2(1.0/6.0, 1.0/3.0);\n    const vec4 D = vec4(0.0, 0.5, 1.0, 2.0);\n\n    vec3 i = floor(v + dot(v, C.yyy));\n    vec3 x0 = v - i + dot(i, C.xxx);\n\n    vec3 g = step(x0.yzx, x0.xyz);\n    vec3 l = 1.0 - g;\n    vec3 i1 = min(g.xyz, l.zxy);\n    vec3 i2 = max(g.xyz, l.zxy);\n\n    vec3 x1 = x0 - i1 + 1.0 * C.xxx;\n    vec3 x2 = x0 - i2 + 2.0 * C.xxx;\n    vec3 x3 = x0 - 1. + 3.0 * C.xxx;\n\n    i = mod(i, 289.0); \n    vec4 p = permute(permute(permute( \n              i.z + vec4(0.0, i1.z, i2.z, 1.0))\n            + i.y + vec4(0.0, i1.y, i2.y, 1.0)) \n            + i.x + vec4(0.0, i1.x, i2.x, 1.0));\n\n    float n_ = 1.0/7.0;\n    vec3 ns = n_ * D.wyz - D.xzx;\n\n    vec4 j = p - 49.0 * floor(p * ns.z *ns.z);\n\n    vec4 x_ = floor(j * ns.z);\n    vec4 y_ = floor(j - 7.0 * x_);\n\n    vec4 x = x_ *ns.x + ns.yyyy;\n    vec4 y = y_ *ns.x + ns.yyyy;\n    vec4 h = 1.0 - abs(x) - abs(y);\n\n    vec4 b0 = vec4(x.xy, y.xy);\n    vec4 b1 = vec4(x.zw, y.zw);\n\n    vec4 s0 = floor(b0)*2.0 + 1.0;\n    vec4 s1 = floor(b1)*2.0 + 1.0;\n    vec4 sh = -step(h, vec4(0.0));\n\n    vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy;\n    vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww;\n\n    vec3 p0 = vec3(a0.xy,h.x);\n    vec3 p1 = vec3(a0.zw,h.y);\n    vec3 p2 = vec3(a1.xy,h.z);\n    vec3 p3 = vec3(a1.zw,h.w);\n\n    vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n    p0 *= norm.x;\n    p1 *= norm.y;\n    p2 *= norm.z;\n    p3 *= norm.w;\n\n    vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n    m = m * m;\n    return 42.0 * dot(m*m, vec4(dot(p0,x0), dot(p1,x1), dot(p2,x2), dot(p3,x3)));\n  }\n\n  // Fractal Brownian Motion\n  float fbm(vec3 p, int octaves) {\n    float value = 0.0;\n    float amplitude = 1.0;\n    float frequency = 1.0;\n    float persistence = 0.5;\n    \n    // Use a fixed seed for terrain to keep it static\n    vec3 fixedPos = p + vec3(seed * 0.01);\n    \n    for (int i = 0; i < octaves; i++) {\n      if (i >= octaves) break;\n      value += amplitude * snoise(fixedPos * frequency);\n      amplitude *= persistence;\n      frequency *= 2.0;\n    }\n    \n    return value;\n  }\n\n  // Generate continent mask\n  float generateContinents(vec3 position) {\n    // Use the seed to create different continent patterns\n    vec3 seedOffset = vec3(seed * 0.1, seed * 0.2, seed * 0.3);\n    \n    // Base continent noise\n    float continentNoise = 0.0;\n    \n    // Generate multiple continent centers\n    for (float i = 0.0; i < 10.0; i++) {\n      if (i >= continentCount) break;\n      \n      // Create a unique position for each continent center\n      float angle1 = (i / continentCount) * 6.28 + seed * 0.1;\n      float angle2 = (i / continentCount) * 3.14 + seed * 0.2;\n      \n      vec3 continentCenter = vec3(\n        sin(angle1) * cos(angle2),\n        sin(angle1) * sin(angle2),\n        cos(angle1)\n      );\n      \n      // Distance to continent center\n      float dist = distance(position, continentCenter);\n      \n      // Continent shape with some noise\n      float continentShape = smoothstep(continentSize, 0.0, dist);\n      \n      // Add some noise to the continent edges\n      float edgeNoise = fbm(position * 2.0 + seedOffset + continentCenter, 3) * 0.5;\n      \n      // Combine\n      continentNoise = max(continentNoise, continentShape + edgeNoise * 0.3);\n    }\n    \n    // Add some small islands\n    float islandNoise = fbm(position * 3.0 + seedOffset, 4) * 0.3;\n    \n    return clamp(continentNoise + islandNoise * 0.3, 0.0, 1.0);\n  }\n\n  // Enhanced texture detail function\n  float getTextureDetail(vec3 position, float scale) {\n    return fbm(position * scale, 3) * 0.05;\n  }\n\n  void main() {\n    vUv = uv;\n    vNormal = normal;\n    vPosition = position;\n    vOrigPosition = position;\n    \n    vec3 pos = position;\n    float elevation = 0.0;\n    \n    if (isGaseous > 0.5) {\n      // Gas giant features - keep these animated\n      float bands = sin(pos.y * 10.0 + time * 0.1) * 0.5;\n      float storms = snoise(pos * vec3(2.0, 8.0, 2.0) + time * 0.15) * 0.5;\n      float cyclones = snoise(pos * vec3(4.0, 1.0, 4.0) + time * 0.05) * 0.25;\n      \n      // Add more detailed texture to gas giants\n      float gasDetail = getTextureDetail(pos * 10.0, 20.0);\n      \n      elevation = mix(bands, storms, 0.5) + cyclones + gasDetail;\n      elevation *= 0.05; // Reduced distortion for gas giants\n    } else {\n      // Generate continent mask\n      float continentMask = generateContinents(normalize(position));\n      \n      // Generate detailed terrain only on continents\n      float detailedTerrain = fbm(position * surfaceRoughness * noiseScale + vec3(seed), 5) * 0.5;\n      \n      // Add more micro-detail to terrain\n      float microDetail = getTextureDetail(position * 50.0 * noiseScale, 100.0);\n      detailedTerrain += microDetail;\n      \n      // Apply the continent mask to the terrain\n      float maskedTerrain = detailedTerrain * continentMask;\n      \n      // Add some base terrain for underwater features\n      float baseTerrain = fbm(position * 0.5 * noiseScale + vec3(seed * 2.0), 3) * 0.02;\n      \n      // Add volcanic features\n      float volcanic = 0.0;\n      if (volcanicActivity > 0.0) {\n        volcanic = pow(fbm(position * 8.0 * noiseScale + vec3(seed * 3.0), 2), 3.0) * volcanicActivity * continentMask;\n      }\n      \n      // Add ridges and cracks to terrain\n      float ridges = 1.0 - abs(fbm(position * 12.0 * noiseScale + vec3(seed * 4.0), 3));\n      ridges = pow(ridges, 3.0) * 0.15 * continentMask;\n      \n      // Combine all terrain features\n      elevation = maskedTerrain * 0.15 + baseTerrain + volcanic * 0.1 + ridges * 0.05;\n      \n      // Make sure continents have a minimum height\n      elevation = mix(baseTerrain, elevation, continentMask);\n    }\n    \n    vElevation = elevation;\n    \n    // Apply displacement\n    pos += normal * elevation;\n    \n    gl_Position = projectionMatrix * modelViewMatrix * vec4(pos, 1.0);\n  }\n`\n","export const fragmentShader = `\n  varying vec2 vUv;\n  varying vec3 vNormal;\n  varying vec3 vPosition;\n  varying float vElevation;\n  varying vec3 vOrigPosition;\n  \n  uniform float time;\n  uniform float isGaseous;\n  uniform float liquidHeight;\n  uniform float temperature;\n  uniform float biomass;\n  uniform float debugMode;\n  uniform float seed;\n  uniform float continentSize;\n  uniform float continentCount;\n  \n  // Visibility toggles for debug mode\n  uniform vec4 visibleTerrains; // x: ocean, y: beach, z: lowland, w: midland\n  uniform vec4 visibleTerrains2; // x: highland, y: mountain, z: snow, w: unused\n  \n  uniform vec3 atmosphereColor;\n  uniform vec3 oceanColor;\n  uniform vec3 oceanPatternColor;\n  uniform vec3 beachColor;\n  uniform vec3 lowlandColor;\n  uniform vec3 midlandColor;\n  uniform vec3 highlandColor;\n  uniform vec3 mountainColor;\n  uniform vec3 snowColor;\n  \n  // Simplex 3D Noise\n  vec4 permute(vec4 x){return mod(((x*34.0)+1.0)*x, 289.0);}\n  vec4 taylorInvSqrt(vec4 r){return 1.79284291400159 - 0.85373472095314 * r;}\n\n  float snoise(vec3 v){ \n    const vec2 C = vec2(1.0/6.0, 1.0/3.0);\n    const vec4 D = vec4(0.0, 0.5, 1.0, 2.0);\n\n    vec3 i = floor(v + dot(v, C.yyy));\n    vec3 x0 = v - i + dot(i, C.xxx);\n\n    vec3 g = step(x0.yzx, x0.xyz);\n    vec3 l = 1.0 - g;\n    vec3 i1 = min(g.xyz, l.zxy);\n    vec3 i2 = max(g.xyz, l.zxy);\n\n    vec3 x1 = x0 - i1 + 1.0 * C.xxx;\n    vec3 x2 = x0 - i2 + 2.0 * C.xxx;\n    vec3 x3 = x0 - 1. + 3.0 * C.xxx;\n\n    i = mod(i, 289.0); \n    vec4 p = permute(permute(permute( \n              i.z + vec4(0.0, i1.z, i2.z, 1.0))\n            + i.y + vec4(0.0, i1.y, i2.y, 1.0)) \n            + i.x + vec4(0.0, i1.x, i2.x, 1.0));\n\n    float n_ = 1.0/7.0;\n    vec3 ns = n_ * D.wyz - D.xzx;\n\n    vec4 j = p - 49.0 * floor(p * ns.z *ns.z);\n\n    vec4 x_ = floor(j * ns.z);\n    vec4 y_ = floor(j - 7.0 * x_);\n\n    vec4 x = x_ *ns.x + ns.yyyy;\n    vec4 y = y_ *ns.x + ns.yyyy;\n    vec4 h = 1.0 - abs(x) - abs(y);\n\n    vec4 b0 = vec4(x.xy, y.xy);\n    vec4 b1 = vec4(x.zw, y.zw);\n\n    vec4 s0 = floor(b0)*2.0 + 1.0;\n    vec4 s1 = floor(b1)*2.0 + 1.0;\n    vec4 sh = -step(h, vec4(0.0));\n\n    vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy;\n    vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww;\n\n    vec3 p0 = vec3(a0.xy,h.x);\n    vec3 p1 = vec3(a0.zw,h.y);\n    vec3 p2 = vec3(a1.xy,h.z);\n    vec3 p3 = vec3(a1.zw,h.w);\n\n    vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n    p0 *= norm.x;\n    p1 *= norm.y;\n    p2 *= norm.z;\n    p3 *= norm.w;\n\n    vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n    m = m * m;\n    return 42.0 * dot(m*m, vec4(dot(p0,x0), dot(p1,x1), dot(p2,x2), dot(p3,x3)));\n  }\n\n  // Fractal Brownian Motion\n  float fbm(vec3 p, int octaves) {\n    float value = 0.0;\n    float amplitude = 1.0;\n    float frequency = 1.0;\n    float persistence = 0.5;\n    \n    // Use a fixed seed for terrain to keep it static\n    vec3 fixedPos = p + vec3(seed * 0.01);\n    \n    for (int i = 0; i < octaves; i++) {\n      if (i >= octaves) break;\n      value += amplitude * snoise(fixedPos * frequency);\n      amplitude *= persistence;\n      frequency *= 2.0;\n    }\n    \n    return value;\n  }\n\n  // Generate continent mask - same as in vertex shader\n  float generateContinents(vec3 position) {\n    // Use the seed to create different continent patterns\n    vec3 seedOffset = vec3(seed * 0.1, seed * 0.2, seed * 0.3);\n    \n    // Base continent noise\n    float continentNoise = 0.0;\n    \n    // Generate multiple continent centers\n    for (float i = 0.0; i < 10.0; i++) {\n      if (i >= continentCount) break;\n      \n      // Create a unique position for each continent center\n      float angle1 = (i / continentCount) * 6.28 + seed * 0.1;\n      float angle2 = (i / continentCount) * 3.14 + seed * 0.2;\n      \n      vec3 continentCenter = vec3(\n        sin(angle1) * cos(angle2),\n        sin(angle1) * sin(angle2),\n        cos(angle1)\n      );\n      \n      // Distance to continent center\n      float dist = distance(position, continentCenter);\n      \n      // Continent shape with some noise\n      float continentShape = smoothstep(continentSize, 0.0, dist);\n      \n      // Add some noise to the continent edges\n      float edgeNoise = fbm(position * 2.0 + seedOffset + continentCenter, 3) * 0.5;\n      \n      // Combine\n      continentNoise = max(continentNoise, continentShape + edgeNoise * 0.3);\n    }\n    \n    // Add some small islands\n    float islandNoise = fbm(position * 3.0 + seedOffset, 4) * 0.3;\n    \n    return clamp(continentNoise + islandNoise * 0.3, 0.0, 1.0);\n  }\n\n  // Enhanced texture detail function\n  float getTextureDetail(vec3 position, float scale, float intensity) {\n    float detail = fbm(position * scale, 3) * intensity;\n    return detail;\n  }\n\n  void main() {\n    vec3 normal = normalize(vNormal);\n    float fresnel = pow(1.0 - abs(dot(normalize(vPosition), normal)), 2.0);\n    \n    vec3 finalColor;\n    \n    if (isGaseous > 0.5) {\n      // Gas giant coloring\n      float bands = sin(vPosition.y * 10.0 + time * 0.1) * 0.5 + 0.5;\n      \n      // Add more detailed texture to gas bands\n      float bandDetail = getTextureDetail(vPosition * 5.0, 10.0, 0.3);\n      bands = bands + bandDetail * 0.2;\n      \n      // Create color bands\n      vec3 bandColor1 = atmosphereColor * 0.8;\n      vec3 bandColor2 = atmosphereColor * 1.2;\n      vec3 bandColor = mix(bandColor1, bandColor2, bands);\n      \n      // Add storm features\n      float stormPattern = snoise(vPosition * vec3(8.0, 2.0, 8.0) + time * 0.1);\n      float stormDetail = getTextureDetail(vPosition * 15.0, 20.0, 0.5);\n      stormPattern = stormPattern + stormDetail * 0.3;\n      \n      vec3 stormColor = vec3(1.0, 1.0, 0.9) * smoothstep(0.6, 0.8, stormPattern);\n      \n      finalColor = mix(bandColor, stormColor, smoothstep(0.6, 0.8, stormPattern) * 0.5);\n      \n      // Add swirling patterns\n      float swirl = snoise(vPosition * 3.0 + vec3(time * 0.02, time * 0.01, 0.0)) * 0.2;\n      finalColor = mix(finalColor, bandColor * 1.3, swirl);\n      \n      // Add atmosphere glow\n      finalColor = mix(finalColor, atmosphereColor, fresnel * 0.5);\n    } else {\n      // Terrestrial planet coloring\n      float height = vElevation + 0.5; // Normalize to 0-1 range approximately\n      \n      // Get continent mask for sharp land/water boundaries\n      float continentMask = generateContinents(normalize(vOrigPosition));\n      \n      // Ocean pattern with enhanced detail\n      vec3 oceanPos = vOrigPosition * 20.0 + vec3(time * 0.05, 0.0, 0.0);\n      float oceanPattern = snoise(oceanPos) * 0.5 + 0.5;\n      float oceanDetail = getTextureDetail(vOrigPosition * 30.0, 50.0, 0.2);\n      oceanPattern = oceanPattern + oceanDetail;\n      \n      // Beach width\n      float beachWidth = 0.03;\n      \n      // Determine color based on height and continent mask\n      vec3 terrainColor;\n      \n      if (debugMode > 0.5) {\n        // Debug mode - show distinct terrain levels with visibility toggles\n        if (height < liquidHeight) {\n          // Ocean\n          terrainColor = visibleTerrains.x > 0.5 ? oceanColor : vec3(0.0, 0.0, 0.0);\n        } else if (height < liquidHeight + beachWidth) {\n          // Beach\n          terrainColor = visibleTerrains.y > 0.5 ? beachColor : vec3(0.0, 0.0, 0.0);\n        } else if (height < liquidHeight + 0.15) {\n          // Lowland\n          terrainColor = visibleTerrains.z > 0.5 ? lowlandColor : vec3(0.0, 0.0, 0.0);\n        } else if (height < liquidHeight + 0.3) {\n          // Midland\n          terrainColor = visibleTerrains.w > 0.5 ? midlandColor : vec3(0.0, 0.0, 0.0);\n        } else if (height < liquidHeight + 0.45) {\n          // Highland\n          terrainColor = visibleTerrains2.x > 0.5 ? highlandColor : vec3(0.0, 0.0, 0.0);\n        } else if (height < liquidHeight + 0.6) {\n          // Mountain\n          terrainColor = visibleTerrains2.y > 0.5 ? mountainColor : vec3(0.0, 0.0, 0.0);\n        } else {\n          // Snow\n          terrainColor = visibleTerrains2.z > 0.5 ? snowColor : vec3(0.0, 0.0, 0.0);\n        }\n      } else {\n        // Normal rendering with smooth transitions and sharp coastlines\n        if (continentMask < 0.2 || height < liquidHeight - 0.02) {\n          // Deep ocean\n          vec3 baseOceanColor = mix(oceanColor, oceanPatternColor, oceanPattern * 0.3);\n          float depth = 1.0 - (height / liquidHeight);\n          terrainColor = mix(baseOceanColor * 1.2, baseOceanColor * 0.7, depth);\n          \n          // Add waves and more detailed ocean texture\n          float waves = snoise(vPosition * 50.0 + vec3(time * 0.2, 0.0, 0.0)) * 0.02;\n          float currentPattern = snoise(vPosition * 20.0 + vec3(time * 0.1, time * 0.05, 0.0)) * 0.03;\n          terrainColor += vec3(waves + currentPattern);\n        } else if (height < liquidHeight + beachWidth) {\n          // Beach/shoreline transition\n          float beachBlend = smoothstep(liquidHeight, liquidHeight + beachWidth, height);\n          terrainColor = mix(oceanColor, beachColor, beachBlend);\n          \n          // Add beach texture\n          float sandRipples = snoise(vOrigPosition * 100.0) * 0.05;\n          terrainColor += vec3(sandRipples);\n        } else {\n          // Land - normalize height above water level\n          float landHeight = (height - liquidHeight) / 0.5; // Scale to 0-1 for land\n          \n          // Add more detailed terrain texture\n          float terrainDetail = getTextureDetail(vOrigPosition * 50.0, 100.0, 0.15);\n          float terrainNoise = fbm(vOrigPosition * 10.0 + vec3(seed * 5.0), 2) * 0.1 + terrainDetail;\n          \n          // Temperature affects snow line\n          float snowLine = 0.8 - (temperature / 700.0) * 0.4;\n          \n          if (landHeight > snowLine) {\n            // Snow caps\n            float snowBlend = smoothstep(snowLine, snowLine + 0.1, landHeight);\n            terrainColor = mix(mountainColor, snowColor, snowBlend);\n            \n            // Add snow texture\n            float snowDetail = snoise(vOrigPosition * 80.0) * 0.05;\n            terrainColor += vec3(snowDetail);\n          } else if (landHeight < 0.25) {\n            // Lowland - transition from beach to lowland\n            float lowlandBlend = smoothstep(0.0, 0.25, landHeight + terrainNoise);\n            terrainColor = mix(beachColor, lowlandColor, lowlandBlend);\n            \n            // Add lowland texture\n            float grassDetail = snoise(vOrigPosition * 120.0) * 0.05;\n            terrainColor += vec3(0.0, grassDetail, 0.0);\n          } else if (landHeight < 0.5) {\n            // Midland\n            float midlandBlend = smoothstep(0.25, 0.5, landHeight + terrainNoise);\n            terrainColor = mix(lowlandColor, midlandColor, midlandBlend);\n            \n            // Add midland texture\n            float forestDetail = snoise(vOrigPosition * 100.0) * 0.05;\n            terrainColor += vec3(0.0, forestDetail, 0.0);\n          } else if (landHeight < 0.75) {\n            // Highland\n            float highlandBlend = smoothstep(0.5, 0.75, landHeight + terrainNoise);\n            terrainColor = mix(midlandColor, highlandColor, highlandBlend);\n            \n            // Add highland texture\n            float rockDetail = snoise(vOrigPosition * 80.0) * 0.05;\n            terrainColor += vec3(rockDetail * 0.5, rockDetail * 0.3, 0.0);\n          } else {\n            // Mountain\n            float mountainBlend = smoothstep(0.75, 0.9, landHeight + terrainNoise);\n            terrainColor = mix(highlandColor, mountainColor, mountainBlend);\n            \n            // Add mountain texture\n            float peakDetail = snoise(vOrigPosition * 150.0) * 0.1;\n            terrainColor += vec3(peakDetail);\n          }\n          \n          // Adjust color based on temperature\n          float tempFactor = clamp((temperature - 50.0) / 650.0, 0.0, 1.0);\n          if (tempFactor < 0.3 && landHeight > 0.6) {\n            // Cold - add ice/snow to high elevations\n            float snowAmount = smoothstep(0.6, 0.8, landHeight);\n            terrainColor = mix(terrainColor, snowColor, snowAmount);\n          } else if (tempFactor > 0.7) {\n            // Hot - more reddish/desert colors\n            terrainColor = mix(terrainColor, vec3(0.8, 0.6, 0.4), 0.3);\n          }\n          \n          // Add biomass (vegetation) to appropriate areas\n          if (biomass > 0.0 && tempFactor > 0.2 && tempFactor < 0.8) {\n            float vegetationAmount = biomass * smoothstep(0.1, 0.4, landHeight) * (1.0 - smoothstep(0.6, 0.9, landHeight));\n            \n            // Vegetation detail noise\n            float vegDetail = fbm(vOrigPosition * 15.0 + vec3(seed * 7.0), 2) * 0.5 + 0.5;\n            vegetationAmount *= vegDetail;\n            \n            // Adjust vegetation color based on temperature\n            vec3 vegetationColor = mix(vec3(0.1, 0.5, 0.1), vec3(0.2, 0.6, 0.2), tempFactor); // Green\n            terrainColor = mix(terrainColor, vegetationColor, vegetationAmount);\n          }\n        }\n      }\n      \n      // Add atmosphere at edges\n      finalColor = mix(terrainColor, atmosphereColor, fresnel * 0.4);\n      \n      // Add clouds\n      float cloudCoverage = 0.3;\n      float cloudSpeed = 0.01;\n      vec3 cloudPos = vOrigPosition * 2.0 + vec3(time * cloudSpeed, 0.0, 0.0);\n      float cloudNoise = fbm(cloudPos + vec3(seed * 9.0), 4);\n      float cloudDetail = getTextureDetail(cloudPos * 2.0, 5.0, 0.2);\n      float clouds = smoothstep(0.4, 0.6, cloudNoise + cloudDetail) * cloudCoverage;\n      \n      // Only add clouds above land or near coastlines\n      if (height > liquidHeight - 0.05) {\n        finalColor = mix(finalColor, vec3(1.0), clouds * 0.7);\n      }\n    }\n    \n    // Add lighting\n    float light = dot(normal, normalize(vec3(1.0, 1.0, 1.0))) * 0.5 + 0.5;\n    finalColor *= light;\n    \n    gl_FragColor = vec4(finalColor, 1.0);\n  }\n`\n","\n\nimport { useRef, useMemo, useEffect } from \"react\"\nimport { useFrame } from \"@react-three/fiber\"\nimport * as THREE from \"three\"\nimport type { PlanetConfig } from \"../utils/planet-config\"\nimport { defaultPlanetConfig } from \"../utils/planet-config\"\nimport { vertexShader } from \"../utils/shaders/vertex-shader\"\nimport { fragmentShader } from \"../utils/shaders/fragment-shader\"\n\ninterface PlanetProps {\n  config: PlanetConfig\n};\n\nexport default function Planet({ config }: PlanetProps) {\n  const meshRef = useRef<THREE.Mesh>(null)\n  const materialRef = useRef<THREE.ShaderMaterial | null>(null)\n  const atmosphereRef = useRef<THREE.Mesh>(null)\n\n  // Use default config as fallback if config is undefined\n  const safeConfig = config || defaultPlanetConfig\n\n  // Create shader material with uniforms based on planet config\n  const shaderMaterial = useMemo(() => {\n    if (!safeConfig || !safeConfig.colors) {\n      return null\n    }\n\n    const material = new THREE.ShaderMaterial({\n      vertexShader,\n      fragmentShader,\n      uniforms: {\n        time: { value: 0 },\n        seed: { value: safeConfig.seed },\n        radius: { value: safeConfig.radius },\n        isGaseous: { value: safeConfig.type === \"gaseous\" ? 1.0 : 0.0 },\n        surfaceRoughness: { value: safeConfig.terrainRoughness },\n        liquidHeight: { value: safeConfig.liquidHeight },\n        volcanicActivity: { value: safeConfig.volcanicActivity },\n        temperature: { value: safeConfig.temperature },\n        biomass: { value: safeConfig.biomass },\n        continentSize: { value: safeConfig.continentSize },\n        continentCount: { value: safeConfig.continentCount },\n        noiseScale: { value: safeConfig.noiseScale },\n        debugMode: { value: safeConfig.debugMode ? 1.0 : 0.0 },\n        visibleTerrains: {\n          value: new THREE.Vector4(\n            safeConfig.visibleTerrains?.ocean ? 1.0 : 0.0,\n            safeConfig.visibleTerrains?.beach ? 1.0 : 0.0,\n            safeConfig.visibleTerrains?.lowland ? 1.0 : 0.0,\n            safeConfig.visibleTerrains?.midland ? 1.0 : 0.0,\n          ),\n        },\n        visibleTerrains2: {\n          value: new THREE.Vector4(\n            safeConfig.visibleTerrains?.highland ? 1.0 : 0.0,\n            safeConfig.visibleTerrains?.mountain ? 1.0 : 0.0,\n            safeConfig.visibleTerrains?.snow ? 1.0 : 0.0,\n            0.0,\n          ),\n        },\n\n        // Colors\n        atmosphereColor: { value: new THREE.Color(safeConfig.colors.atmosphere) },\n        oceanColor: { value: new THREE.Color(safeConfig.colors.ocean) },\n        oceanPatternColor: { value: new THREE.Color(safeConfig.colors.oceanPattern) },\n        beachColor: { value: new THREE.Color(safeConfig.colors.beach) },\n        lowlandColor: { value: new THREE.Color(safeConfig.colors.lowland) },\n        midlandColor: { value: new THREE.Color(safeConfig.colors.midland) },\n        highlandColor: { value: new THREE.Color(safeConfig.colors.highland) },\n        mountainColor: { value: new THREE.Color(safeConfig.colors.mountain) },\n        snowColor: { value: new THREE.Color(safeConfig.colors.snow) },\n      },\n    })\n\n    return material\n  }, [safeConfig]) // Update when any config property changes\n\n  // Set the material ref after the material is created\n  useEffect(() => {\n    if (shaderMaterial) {\n      materialRef.current = shaderMaterial\n    }\n  }, [shaderMaterial])\n\n  // Auto-rotate the planet and update time uniform\n  useFrame((state) => {\n    if (meshRef.current) {\n      meshRef.current.rotation.y += 0.001\n    }\n\n    if (atmosphereRef.current) {\n      atmosphereRef.current.rotation.y += 0.0005\n    }\n\n    if (materialRef.current) {\n      // Only animate certain aspects with time\n      materialRef.current.uniforms.time.value = state.clock.getElapsedTime()\n    }\n  })\n\n  // Create planet mesh with appropriate geometry based on type\n  if (!shaderMaterial) {\n    return null\n  }\n\n  return (\n    <group>\n      <mesh ref={meshRef} scale={safeConfig.radius}>\n        <sphereGeometry args={[1, 128, 128]} />\n        <primitive object={shaderMaterial} attach=\"material\" />\n      </mesh>\n\n      {/* Add atmosphere */}\n      <mesh ref={atmosphereRef} scale={safeConfig.radius * (safeConfig.type === \"gaseous\" ? 1.15 : 1.05)}>\n        <sphereGeometry args={[1, 64, 64]} />\n        <meshBasicMaterial\n          color={safeConfig.colors.atmosphere}\n          transparent={true}\n          opacity={safeConfig.type === \"gaseous\" ? 0.7 : 0.3}\n          side={THREE.BackSide}\n        />\n      </mesh>\n    </group>\n  );\n};","import { type ClassValue, clsx } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}","import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"../../utils/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent };","\n\nimport * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"../../utils/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider };","\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"../../utils/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n);\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }","import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"../../utils/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }","import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"../../utils/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants };","\n\nimport * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"../../utils/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox };","\n\nimport * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"../../utils/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent };","import * as React from \"react\"\n\nimport { cn } from \"../../utils/utils\"\n\nexport interface InputProps\n  extends React.InputHTMLAttributes<HTMLInputElement> {}\n\nconst Input = React.forwardRef<HTMLInputElement, InputProps>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }","\n\nimport type React from \"react\"\n\nimport { useState, useEffect } from \"react\"\nimport { HexColorPicker } from \"react-colorful\"\nimport { Popover, PopoverContent, PopoverTrigger } from \"./ui/popover\";\nimport { Input } from \"./ui/input\"\nimport { Label } from \"./ui/label\"\n\ninterface ColorPickerProps {\n  color: string\n  onChange: (color: string) => void\n  label?: string\n}\n\nexport default function ColorPicker({ color, onChange, label }: ColorPickerProps) {\n  const [isOpen, setIsOpen] = useState(false)\n  const [localColor, setLocalColor] = useState(color)\n\n  // Update local color when prop changes\n  useEffect(() => {\n    setLocalColor(color)\n  }, [color])\n\n  // Handle manual hex input\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value\n    setLocalColor(value)\n\n    // Only update parent if it's a valid hex color\n    if (/^#[0-9A-F]{6}$/i.test(value)) {\n      onChange(value)\n    }\n  }\n\n  // Handle color picker change\n  const handleColorChange = (newColor: string) => {\n    setLocalColor(newColor)\n    onChange(newColor)\n  }\n\n  return (\n    <div className=\"flex flex-col space-y-1.5\">\n      {label && <Label className=\"text-xs\">{label}</Label>}\n      <Popover open={isOpen} onOpenChange={setIsOpen}>\n        <PopoverTrigger asChild>\n          <div className=\"flex h-8 cursor-pointer\">\n            <div\n              className=\"w-8 h-8 rounded-l border border-r-0 border-gray-600\"\n              style={{ backgroundColor: localColor }}\n            />\n            <Input\n              type=\"text\"\n              value={localColor}\n              onChange={handleInputChange}\n              className=\"rounded-l-none w-24 h-8 font-mono text-xs\"\n              onClick={(e) => e.stopPropagation()}\n            />\n          </div>\n        </PopoverTrigger>\n        <PopoverContent className=\"w-auto p-3\" side=\"right\">\n          <HexColorPicker color={localColor} onChange={handleColorChange} />\n        </PopoverContent>\n      </Popover>\n    </div>\n  );\n};","\n\nimport { useState, useEffect } from \"react\"\nimport type { PlanetConfig } from \"../utils/planet-config\";\nimport { getLiquidType, getTemperatureAdjustedColors } from \"../utils/planet-config\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"./ui/tabs\";\nimport { Slider } from \"./ui/slider\"\nimport { Label } from \"./ui/label\";\nimport { Switch } from \"./ui/switch\"\nimport { Button } from \"./ui/button\"\nimport { Checkbox } from \"./ui/checkbox\"\nimport { Download, Upload, RefreshCw } from \"lucide-react\"\nimport ColorPicker from \"./ColorPicker\"\n\ninterface SettingsPanelProps {\n  planetConfig: PlanetConfig\n  onChange: (config: Partial<PlanetConfig>) => void\n}\n\nexport default function SettingsPanel({ planetConfig, onChange }: SettingsPanelProps) {\n  const [showImportExport, setShowImportExport] = useState(false)\n\n  // Update liquid type based on temperature\n  useEffect(() => {\n    const liquidType = getLiquidType(planetConfig.temperature)\n\n    // Only update if the colors don't match the expected liquid type\n    if (\n      planetConfig.colors.ocean !== liquidType.color ||\n      planetConfig.colors.oceanPattern !== liquidType.patternColor\n    ) {\n      onChange({\n        colors: {\n          ...planetConfig.colors,\n          ocean: liquidType.color,\n          oceanPattern: liquidType.patternColor,\n        },\n      })\n    }\n  }, [planetConfig.temperature])\n\n  // Update terrain colors based on temperature\n  useEffect(() => {\n    const terrainColors = getTemperatureAdjustedColors(planetConfig.temperature, planetConfig.biomass)\n\n    // Only update if colors have changed\n    if (\n      planetConfig.colors.beach !== terrainColors.beach ||\n      planetConfig.colors.lowland !== terrainColors.lowland ||\n      planetConfig.colors.midland !== terrainColors.midland ||\n      planetConfig.colors.highland !== terrainColors.highland ||\n      planetConfig.colors.mountain !== terrainColors.mountain ||\n      planetConfig.colors.snow !== terrainColors.snow\n    ) {\n      onChange({\n        colors: {\n          ...planetConfig.colors,\n          ...terrainColors,\n        },\n      })\n    }\n  }, [planetConfig.temperature, planetConfig.biomass])\n\n  // Check if planet should be gaseous or terrestrial based on mass and radius\n  useEffect(() => {\n    if ((planetConfig.mass > 7.5 || planetConfig.radius > 2.5) && planetConfig.type !== \"gaseous\") {\n      onChange({ type: \"gaseous\" })\n    } else if (planetConfig.mass <= 7.5 && planetConfig.radius <= 2.5 && planetConfig.type === \"gaseous\") {\n      onChange({ type: \"terrestrial\" })\n    }\n  }, [planetConfig.mass, planetConfig.radius, planetConfig.type])\n\n  const regenerateSeed = () => {\n    onChange({ seed: Math.floor(Math.random() * 10000) })\n  }\n\n  // Get current liquid type name\n  const liquidType = getLiquidType(planetConfig.temperature)\n\n  return (\n    <div className=\"space-y-6 bg-slate-900 text-slate-100\">\n      <div className=\"flex justify-between items-center\">\n        <Button\n          variant=\"outline\"\n          size=\"sm\"\n          onClick={() => setShowImportExport(!showImportExport)}\n          className=\"flex items-center gap-2 bg-slate-800 text-slate-200 border-slate-700 hover:bg-slate-700\"\n        >\n          {showImportExport ? \"Hide\" : \"Show\"} Import/Export\n          {showImportExport ? <Download className=\"h-4 w-4\" /> : <Upload className=\"h-4 w-4\" />}\n        </Button>\n      </div>\n\n      {showImportExport && (\n        <div className=\"p-4 bg-slate-800 rounded-md space-y-4 border border-slate-700\">\n          <h3 className=\"text-sm font-medium text-slate-200\">Import/Export Configuration</h3>\n          <div className=\"flex gap-2\">\n            <Button\n              variant=\"secondary\"\n              size=\"sm\"\n              onClick={() => {\n                const event = new CustomEvent(\"open-import-dialog\")\n                window.dispatchEvent(event)\n              }}\n              className=\"flex-1 bg-slate-700 text-slate-200 hover:bg-slate-600\"\n            >\n              Import\n            </Button>\n            <Button\n              variant=\"secondary\"\n              size=\"sm\"\n              onClick={() => {\n                const event = new CustomEvent(\"open-export-dialog\")\n                window.dispatchEvent(event)\n              }}\n              className=\"flex-1 bg-slate-700 text-slate-200 hover:bg-slate-600\"\n            >\n              Export\n            </Button>\n          </div>\n        </div>\n      )}\n\n      <Tabs defaultValue=\"basic\" className=\"w-full\">\n        <TabsList className=\"w-full grid grid-cols-3 mb-4 bg-slate-800\">\n          <TabsTrigger value=\"basic\" className=\"data-[state=active]:bg-slate-700\">\n            Basic\n          </TabsTrigger>\n          <TabsTrigger value=\"terrain\" className=\"data-[state=active]:bg-slate-700\">\n            Terrain\n          </TabsTrigger>\n          <TabsTrigger value=\"colors\" className=\"data-[state=active]:bg-slate-700\">\n            Colors\n          </TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"basic\" className=\"space-y-6\">\n          <div className=\"space-y-4\">\n            <div className=\"bg-slate-800 p-4 rounded-md border border-slate-700\">\n              <h3 className=\"text-sm font-medium mb-3 text-slate-200\">Planet Type</h3>\n              <div className=\"flex gap-2\">\n                <Button\n                  variant={planetConfig.type === \"terrestrial\" ? \"default\" : \"outline\"}\n                  size=\"sm\"\n                  onClick={() => onChange({ type: \"terrestrial\" })}\n                  className=\"flex-1\"\n                >\n                  Terrestrial\n                </Button>\n                <Button\n                  variant={planetConfig.type === \"gaseous\" ? \"default\" : \"outline\"}\n                  size=\"sm\"\n                  onClick={() => onChange({ type: \"gaseous\" })}\n                  className=\"flex-1\"\n                >\n                  Gaseous\n                </Button>\n              </div>\n              {(planetConfig.mass > 7.5 || planetConfig.radius > 2.5) && planetConfig.type === \"gaseous\" && (\n                <p className=\"text-xs text-amber-400 mt-2\">\n                  Note: High mass or radius has automatically set this to a gas giant\n                </p>\n              )}\n              {planetConfig.mass <= 7.5 && planetConfig.radius <= 2.5 && planetConfig.type === \"terrestrial\" && (\n                <p className=\"text-xs text-slate-400 mt-2\">Note: Values are in Earth radii/mass units</p>\n              )}\n            </div>\n\n            <div className=\"bg-slate-800 p-4 rounded-md space-y-4 border border-slate-700\">\n              <div className=\"flex justify-between items-center\">\n                <h3 className=\"text-sm font-medium text-slate-200\">Seed: {planetConfig.seed}</h3>\n                <Button\n                  variant=\"outline\"\n                  size=\"icon\"\n                  onClick={regenerateSeed}\n                  className=\"bg-slate-700 border-slate-600\"\n                >\n                  <RefreshCw className=\"h-4 w-4\" />\n                </Button>\n              </div>\n\n              <div className=\"space-y-2\">\n                <div className=\"flex justify-between\">\n                  <Label htmlFor=\"radius\" className=\"text-slate-200\">\n                    Radius (Earth radii)\n                  </Label>\n                  <span className=\"text-sm text-slate-400\">{planetConfig.radius.toFixed(1)}</span>\n                </div>\n                <Slider\n                  id=\"radius\"\n                  min={0.5}\n                  max={5}\n                  step={0.1}\n                  value={[planetConfig.radius]}\n                  onValueChange={(value) => onChange({ radius: value[0] })}\n                  className=\"[&_[role=slider]]:bg-slate-200\"\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <div className=\"flex justify-between\">\n                  <Label htmlFor=\"temperature\" className=\"text-slate-200\">\n                    Temperature\n                  </Label>\n                  <span className=\"text-sm text-slate-400\">\n                    {planetConfig.temperature.toFixed(0)}K ({(planetConfig.temperature - 273.15).toFixed(0)}Â°C)\n                  </span>\n                </div>\n                <Slider\n                  id=\"temperature\"\n                  min={50}\n                  max={700}\n                  step={1}\n                  value={[planetConfig.temperature]}\n                  onValueChange={(value) => onChange({ temperature: value[0] })}\n                  className=\"[&_[role=slider]]:bg-slate-200\"\n                />\n                <div className=\"text-xs text-slate-400\">Liquid Solvent: {liquidType.name}</div>\n              </div>\n\n              <div className=\"space-y-2\">\n                <div className=\"flex justify-between\">\n                  <Label htmlFor=\"mass\" className=\"text-slate-200\">\n                    Mass (Earth masses)\n                  </Label>\n                  <span className=\"text-sm text-slate-400\">{planetConfig.mass.toFixed(1)} Mâ</span>\n                </div>\n                <Slider\n                  id=\"mass\"\n                  min={0.1}\n                  max={10}\n                  step={0.1}\n                  value={[planetConfig.mass]}\n                  onValueChange={(value) => onChange({ mass: value[0] })}\n                  className=\"[&_[role=slider]]:bg-slate-200\"\n                />\n              </div>\n\n              <div className=\"pt-2 border-t border-slate-700\">\n                <div className=\"flex justify-between\">\n                  <Label className=\"text-slate-200\">Density</Label>\n                  <span className=\"text-sm text-slate-400\">\n                    {(planetConfig.mass / ((planetConfig.radius ** 3 * Math.PI * 4) / 3)).toFixed(2)} g/cmÂ³\n                  </span>\n                </div>\n              </div>\n            </div>\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"terrain\" className=\"space-y-6\">\n          {planetConfig.type === \"terrestrial\" && (\n            <div className=\"bg-slate-800 p-4 rounded-md space-y-4 border border-slate-700\">\n              <h3 className=\"text-sm font-medium text-slate-200\">Terrain Properties</h3>\n\n              <div className=\"space-y-2\">\n                <div className=\"flex justify-between\">\n                  <Label htmlFor=\"terrainRoughness\" className=\"text-slate-200\">\n                    Terrain Roughness\n                  </Label>\n                  <span className=\"text-sm text-slate-400\">{planetConfig.terrainRoughness.toFixed(2)}</span>\n                </div>\n                <Slider\n                  id=\"terrainRoughness\"\n                  min={0.1}\n                  max={1}\n                  step={0.01}\n                  value={[planetConfig.terrainRoughness]}\n                  onValueChange={(value) => onChange({ terrainRoughness: value[0] })}\n                  className=\"[&_[role=slider]]:bg-slate-200\"\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <div className=\"flex justify-between\">\n                  <Label htmlFor=\"liquidHeight\" className=\"text-slate-200\">\n                    Ocean Level\n                  </Label>\n                  <span className=\"text-sm text-slate-400\">{planetConfig.liquidHeight.toFixed(2)}</span>\n                </div>\n                <Slider\n                  id=\"liquidHeight\"\n                  min={0.3}\n                  max={0.8}\n                  step={0.01}\n                  value={[planetConfig.liquidHeight]}\n                  onValueChange={(value) => onChange({ liquidHeight: value[0] })}\n                  className=\"[&_[role=slider]]:bg-slate-200\"\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <div className=\"flex justify-between\">\n                  <Label htmlFor=\"continentSize\" className=\"text-slate-200\">\n                    Continent Size\n                  </Label>\n                  <span className=\"text-sm text-slate-400\">{planetConfig.continentSize.toFixed(2)}</span>\n                </div>\n                <Slider\n                  id=\"continentSize\"\n                  min={0.1}\n                  max={1}\n                  step={0.01}\n                  value={[planetConfig.continentSize]}\n                  onValueChange={(value) => onChange({ continentSize: value[0] })}\n                  className=\"[&_[role=slider]]:bg-slate-200\"\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <div className=\"flex justify-between\">\n                  <Label htmlFor=\"continentCount\" className=\"text-slate-200\">\n                    Continent Count\n                  </Label>\n                  <span className=\"text-sm text-slate-400\">{planetConfig.continentCount.toFixed(0)}</span>\n                </div>\n                <Slider\n                  id=\"continentCount\"\n                  min={1}\n                  max={10}\n                  step={1}\n                  value={[planetConfig.continentCount]}\n                  onValueChange={(value) => onChange({ continentCount: value[0] })}\n                  className=\"[&_[role=slider]]:bg-slate-200\"\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <div className=\"flex justify-between\">\n                  <Label htmlFor=\"noiseScale\" className=\"text-slate-200\">\n                    Detail Level\n                  </Label>\n                  <span className=\"text-sm text-slate-400\">{planetConfig.noiseScale.toFixed(2)}</span>\n                </div>\n                <Slider\n                  id=\"noiseScale\"\n                  min={0.5}\n                  max={2}\n                  step={0.1}\n                  value={[planetConfig.noiseScale]}\n                  onValueChange={(value) => onChange({ noiseScale: value[0] })}\n                  className=\"[&_[role=slider]]:bg-slate-200\"\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <div className=\"flex justify-between\">\n                  <Label htmlFor=\"volcanicActivity\" className=\"text-slate-200\">\n                    Volcanic Activity\n                  </Label>\n                  <span className=\"text-sm text-slate-400\">{planetConfig.volcanicActivity.toFixed(2)}</span>\n                </div>\n                <Slider\n                  id=\"volcanicActivity\"\n                  min={0}\n                  max={1}\n                  step={0.01}\n                  value={[planetConfig.volcanicActivity]}\n                  onValueChange={(value) => onChange({ volcanicActivity: value[0] })}\n                  className=\"[&_[role=slider]]:bg-slate-200\"\n                />\n                <div className=\"text-xs text-slate-400 italic\">Note: Volcanic activity is currently a static value</div>\n              </div>\n\n              <div className=\"space-y-2\">\n                <div className=\"flex justify-between\">\n                  <Label htmlFor=\"biomass\" className=\"text-slate-200\">\n                    Biomass\n                  </Label>\n                  <span className=\"text-sm text-slate-400\">{planetConfig.biomass.toFixed(2)}</span>\n                </div>\n                <Slider\n                  id=\"biomass\"\n                  min={0}\n                  max={1}\n                  step={0.01}\n                  value={[planetConfig.biomass]}\n                  onValueChange={(value) => onChange({ biomass: value[0] })}\n                  className=\"[&_[role=slider]]:bg-slate-200\"\n                />\n                <div className=\"text-xs text-slate-400 italic\">Note: Biomass is currently a static value</div>\n              </div>\n            </div>\n          )}\n\n          <div className=\"bg-slate-800 p-4 rounded-md space-y-4 border border-slate-700\">\n            <div className=\"flex justify-between items-center\">\n              <h3 className=\"text-sm font-medium text-slate-200\">Debug Mode</h3>\n              <Switch\n                checked={planetConfig.debugMode || false}\n                onCheckedChange={(checked) => onChange({ debugMode: checked })}\n              />\n            </div>\n\n            {planetConfig.debugMode && (\n              <div className=\"pt-2 border-t border-slate-700 space-y-2\">\n                <p className=\"text-xs text-slate-400\">Show/hide specific terrain types:</p>\n                <div className=\"grid grid-cols-2 gap-2\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Checkbox\n                      id=\"show-ocean\"\n                      checked={planetConfig.visibleTerrains.ocean}\n                      onCheckedChange={(checked) =>\n                        onChange({\n                          visibleTerrains: {\n                            ...planetConfig.visibleTerrains,\n                            ocean: !!checked,\n                          },\n                        })\n                      }\n                    />\n                    <Label htmlFor=\"show-ocean\" className=\"text-xs cursor-pointer\">\n                      <div className=\"flex items-center gap-2\">\n                        <div\n                          className=\"w-3 h-3 rounded-full\"\n                          style={{ backgroundColor: planetConfig.colors.ocean }}\n                        ></div>\n                        <span>Ocean</span>\n                      </div>\n                    </Label>\n                  </div>\n\n                  <div className=\"flex items-center space-x-2\">\n                    <Checkbox\n                      id=\"show-beach\"\n                      checked={planetConfig.visibleTerrains.beach}\n                      onCheckedChange={(checked) =>\n                        onChange({\n                          visibleTerrains: {\n                            ...planetConfig.visibleTerrains,\n                            beach: !!checked,\n                          },\n                        })\n                      }\n                    />\n                    <Label htmlFor=\"show-beach\" className=\"text-xs cursor-pointer\">\n                      <div className=\"flex items-center gap-2\">\n                        <div\n                          className=\"w-3 h-3 rounded-full\"\n                          style={{ backgroundColor: planetConfig.colors.beach }}\n                        ></div>\n                        <span>Beach</span>\n                      </div>\n                    </Label>\n                  </div>\n\n                  <div className=\"flex items-center space-x-2\">\n                    <Checkbox\n                      id=\"show-lowland\"\n                      checked={planetConfig.visibleTerrains.lowland}\n                      onCheckedChange={(checked) =>\n                        onChange({\n                          visibleTerrains: {\n                            ...planetConfig.visibleTerrains,\n                            lowland: !!checked,\n                          },\n                        })\n                      }\n                    />\n                    <Label htmlFor=\"show-lowland\" className=\"text-xs cursor-pointer\">\n                      <div className=\"flex items-center gap-2\">\n                        <div\n                          className=\"w-3 h-3 rounded-full\"\n                          style={{ backgroundColor: planetConfig.colors.lowland }}\n                        ></div>\n                        <span>Lowland</span>\n                      </div>\n                    </Label>\n                  </div>\n\n                  <div className=\"flex items-center space-x-2\">\n                    <Checkbox\n                      id=\"show-midland\"\n                      checked={planetConfig.visibleTerrains.midland}\n                      onCheckedChange={(checked) =>\n                        onChange({\n                          visibleTerrains: {\n                            ...planetConfig.visibleTerrains,\n                            midland: !!checked,\n                          },\n                        })\n                      }\n                    />\n                    <Label htmlFor=\"show-midland\" className=\"text-xs cursor-pointer\">\n                      <div className=\"flex items-center gap-2\">\n                        <div\n                          className=\"w-3 h-3 rounded-full\"\n                          style={{ backgroundColor: planetConfig.colors.midland }}\n                        ></div>\n                        <span>Midland</span>\n                      </div>\n                    </Label>\n                  </div>\n\n                  <div className=\"flex items-center space-x-2\">\n                    <Checkbox\n                      id=\"show-highland\"\n                      checked={planetConfig.visibleTerrains.highland}\n                      onCheckedChange={(checked) =>\n                        onChange({\n                          visibleTerrains: {\n                            ...planetConfig.visibleTerrains,\n                            highland: !!checked,\n                          },\n                        })\n                      }\n                    />\n                    <Label htmlFor=\"show-highland\" className=\"text-xs cursor-pointer\">\n                      <div className=\"flex items-center gap-2\">\n                        <div\n                          className=\"w-3 h-3 rounded-full\"\n                          style={{ backgroundColor: planetConfig.colors.highland }}\n                        ></div>\n                        <span>Highland</span>\n                      </div>\n                    </Label>\n                  </div>\n\n                  <div className=\"flex items-center space-x-2\">\n                    <Checkbox\n                      id=\"show-mountain\"\n                      checked={planetConfig.visibleTerrains.mountain}\n                      onCheckedChange={(checked) =>\n                        onChange({\n                          visibleTerrains: {\n                            ...planetConfig.visibleTerrains,\n                            mountain: !!checked,\n                          },\n                        })\n                      }\n                    />\n                    <Label htmlFor=\"show-mountain\" className=\"text-xs cursor-pointer\">\n                      <div className=\"flex items-center gap-2\">\n                        <div\n                          className=\"w-3 h-3 rounded-full\"\n                          style={{ backgroundColor: planetConfig.colors.mountain }}\n                        ></div>\n                        <span>Mountain</span>\n                      </div>\n                    </Label>\n                  </div>\n\n                  <div className=\"flex items-center space-x-2\">\n                    <Checkbox\n                      id=\"show-snow\"\n                      checked={planetConfig.visibleTerrains.snow}\n                      onCheckedChange={(checked) =>\n                        onChange({\n                          visibleTerrains: {\n                            ...planetConfig.visibleTerrains,\n                            snow: !!checked,\n                          },\n                        })\n                      }\n                    />\n                    <Label htmlFor=\"show-snow\" className=\"text-xs cursor-pointer\">\n                      <div className=\"flex items-center gap-2\">\n                        <div\n                          className=\"w-3 h-3 rounded-full\"\n                          style={{ backgroundColor: planetConfig.colors.snow }}\n                        ></div>\n                        <span>Snow</span>\n                      </div>\n                    </Label>\n                  </div>\n                </div>\n              </div>\n            )}\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"colors\" className=\"space-y-6\">\n          <div className=\"bg-slate-800 p-4 rounded-md space-y-4 border border-slate-700\">\n            <h3 className=\"text-sm font-medium text-slate-200\">Planet Colors</h3>\n\n            <div className=\"grid grid-cols-2 gap-4\">\n              <ColorPicker\n                label=\"Atmosphere\"\n                color={planetConfig.colors.atmosphere}\n                onChange={(color) => onChange({ colors: { ...planetConfig.colors, atmosphere: color } })}\n              />\n\n              <ColorPicker\n                label={`${liquidType.name}`}\n                color={planetConfig.colors.ocean}\n                onChange={(color) => onChange({ colors: { ...planetConfig.colors, ocean: color } })}\n              />\n\n              <ColorPicker\n                label={`${liquidType.name} Pattern`}\n                color={planetConfig.colors.oceanPattern}\n                onChange={(color) => onChange({ colors: { ...planetConfig.colors, oceanPattern: color } })}\n              />\n\n              <ColorPicker\n                label=\"Beach\"\n                color={planetConfig.colors.beach}\n                onChange={(color) => onChange({ colors: { ...planetConfig.colors, beach: color } })}\n              />\n\n              <ColorPicker\n                label=\"Lowland\"\n                color={planetConfig.colors.lowland}\n                onChange={(color) => onChange({ colors: { ...planetConfig.colors, lowland: color } })}\n              />\n\n              <ColorPicker\n                label=\"Midland\"\n                color={planetConfig.colors.midland}\n                onChange={(color) => onChange({ colors: { ...planetConfig.colors, midland: color } })}\n              />\n\n              <ColorPicker\n                label=\"Highland\"\n                color={planetConfig.colors.highland}\n                onChange={(color) => onChange({ colors: { ...planetConfig.colors, highland: color } })}\n              />\n\n              <ColorPicker\n                label=\"Mountain\"\n                color={planetConfig.colors.mountain}\n                onChange={(color) => onChange({ colors: { ...planetConfig.colors, mountain: color } })}\n              />\n\n              <ColorPicker\n                label=\"Snow\"\n                color={planetConfig.colors.snow}\n                onChange={(color) => onChange({ colors: { ...planetConfig.colors, snow: color } })}\n              />\n            </div>\n          </div>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n};","\n\nimport { useState } from \"react\"\nimport { Canvas } from \"@react-three/fiber\"\nimport { OrbitControls, Stars } from \"@react-three/drei\"\nimport { Cog } from \"lucide-react\"\nimport type { PlanetConfig } from \"../utils/planet-config\"\nimport Planet from \"./Planet\"\nimport SettingsPanel from \"./SettingsPanel\"\n\ninterface PlanetViewerProps {\n  planetConfig: PlanetConfig\n  onConfigChange: (config: Partial<PlanetConfig>) => void\n};\n\nexport default function PlanetViewer({ planetConfig, onConfigChange }: PlanetViewerProps) {\n  const [showSettings, setShowSettings] = useState(false)\n\n  return (\n    <div className=\"w-full h-full bg-black relative\">\n      <Canvas camera={{ position: [0, 0, 10], fov: 45 }}>\n        <ambientLight intensity={0.3} />\n        <pointLight position={[10, 10, 10]} intensity={1.5} />\n        <Planet config={planetConfig} />\n        <OrbitControls enablePan={true} enableZoom={true} enableRotate={true} />\n        <Stars radius={100} depth={50} count={5000} factor={4} saturation={0} fade speed={1} />\n      </Canvas>\n\n      <button\n        onClick={() => setShowSettings(!showSettings)}\n        className=\"absolute top-4 right-4 bg-slate-800 p-2 rounded-full text-white hover:bg-slate-700 transition-colors z-10 border border-slate-700\"\n        aria-label=\"Toggle settings\"\n      >\n        <Cog className=\"w-6 h-6\" />\n      </button>\n\n      {showSettings && (\n        <div className=\"absolute top-0 right-0 w-full md:w-96 h-full bg-slate-900/95 text-white overflow-y-auto p-4 backdrop-blur-sm z-10 transition-all border-l border-slate-700\">\n          <div className=\"flex justify-between items-center mb-4\">\n            <h2 className=\"text-xl font-bold text-slate-100\">Planet Settings</h2>\n            <button\n              onClick={() => setShowSettings(false)}\n              className=\"text-slate-300 hover:text-slate-100\"\n              aria-label=\"Close settings\"\n            >\n              <svg\n                xmlns=\"http://www.w3.org/2000/svg\"\n                width=\"24\"\n                height=\"24\"\n                viewBox=\"0 0 24 24\"\n                fill=\"none\"\n                stroke=\"currentColor\"\n                strokeWidth=\"2\"\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n              >\n                <line x1=\"18\" y1=\"6\" x2=\"6\" y2=\"18\"></line>\n                <line x1=\"6\" y1=\"6\" x2=\"18\" y2=\"18\"></line>\n              </svg>\n            </button>\n          </div>\n          <SettingsPanel planetConfig={planetConfig} onChange={onConfigChange} />\n        </div>\n      )}\n    </div>\n  );\n};","\n\nimport { useRef, useMemo } from \"react\";\nimport { useFrame } from \"@react-three/fiber\";\nimport * as THREE from \"three\";\nimport type { PlanetConfig } from \"../utils/planet-config\";\nimport { defaultPlanetConfig } from \"../utils/planet-config\";\n\ninterface SimplePlanetMeshProps {\n  config: PlanetConfig;\n};\n\nexport default function SimplePlanetMesh({ config }: SimplePlanetMeshProps) {\n  const meshRef = useRef<THREE.Mesh>(null)\n\n  // Use default config as fallback if config is undefined\n  const safeConfig = config || defaultPlanetConfig\n\n  const material = useMemo(() => {\n    // Ensure we have a valid config before proceeding\n    if (!safeConfig || !safeConfig.colors) {\n      return new THREE.MeshBasicMaterial({ color: \"#888888\" })\n    }\n\n    // Get simplified colors for the simple interface\n    const primaryColor = safeConfig.type === \"gaseous\" ? safeConfig.colors.atmosphere : safeConfig.colors.ocean\n    const secondaryColor = safeConfig.type === \"gaseous\" ? safeConfig.colors.ocean : safeConfig.colors.lowland\n    const accentColor = safeConfig.type === \"gaseous\" ? safeConfig.colors.oceanPattern : safeConfig.colors.highland\n\n    return new THREE.ShaderMaterial({\n      uniforms: {\n        time: { value: 0 },\n        seed: { value: safeConfig.seed || 1234 },\n        primaryColor: { value: new THREE.Color(primaryColor) },\n        secondaryColor: { value: new THREE.Color(secondaryColor) },\n        accentColor: { value: new THREE.Color(accentColor) },\n        density: { value: (safeConfig.mass || 1) / (((safeConfig.radius || 1) ** 3 * Math.PI * 4) / 3) },\n        mass: { value: safeConfig.mass || 1 },\n        temperature: { value: safeConfig.temperature || 288 },\n        biomass: { value: safeConfig.biomass || 0 },\n        isGaseous: { value: safeConfig.type === \"gaseous\" ? 1.0 : 0.0 },\n      },\n      vertexShader: `\n        varying vec2 vUv;\n        varying vec3 vNormal;\n        varying vec3 vPosition;\n        varying float vElevation;\n        \n        uniform float time;\n        uniform float seed;\n        uniform float isGaseous;\n        uniform float temperature;\n        \n        // Simple noise function\n        float noise(vec3 p) {\n          return fract(sin(dot(p, vec3(12.9898, 78.233, 45.164))) * 43758.5453 + seed);\n        }\n        \n        float fbm(vec3 p) {\n          float value = 0.0;\n          float amplitude = 0.5;\n          for(int i = 0; i < 4; i++) {\n            value += amplitude * (noise(p) - 0.5);\n            p *= 2.0;\n            amplitude *= 0.5;\n          }\n          return value;\n        }\n\n        void main() {\n          vUv = uv;\n          vNormal = normal;\n          vPosition = position;\n          \n          vec3 pos = position;\n          float elevation = 0.0;\n          \n          if (isGaseous > 0.5) {\n            // Gas giant - smooth bands and swirls\n            float bands = sin(pos.y * 8.0 + time * 0.1) * 0.02;\n            float swirls = fbm(pos * 2.0 + vec3(time * 0.05, 0.0, 0.0)) * 0.03;\n            elevation = bands + swirls;\n          } else {\n            // Terrestrial - more varied terrain\n            float continents = fbm(pos * 1.5) * 0.1;\n            float mountains = max(0.0, fbm(pos * 4.0)) * 0.05;\n            float details = fbm(pos * 8.0) * 0.02;\n            \n            // Add temperature-based variation\n            float tempFactor = clamp((temperature - 200.0) / 500.0, 0.0, 1.0);\n            elevation = continents + mountains * tempFactor + details;\n          }\n          \n          vElevation = elevation;\n          pos += normal * elevation;\n          \n          gl_Position = projectionMatrix * modelViewMatrix * vec4(pos, 1.0);\n        }\n      `,\n      fragmentShader: `\n        uniform vec3 primaryColor;\n        uniform vec3 secondaryColor;\n        uniform vec3 accentColor;\n        uniform float density;\n        uniform float mass;\n        uniform float temperature;\n        uniform float biomass;\n        uniform float isGaseous;\n        uniform float time;\n        uniform float seed;\n        \n        varying vec2 vUv;\n        varying vec3 vNormal;\n        varying vec3 vPosition;\n        varying float vElevation;\n        \n        // Simple noise function\n        float noise(vec3 p) {\n          return fract(sin(dot(p, vec3(12.9898, 78.233, 45.164))) * 43758.5453 + seed);\n        }\n\n        void main() {\n          vec3 lightDirection = normalize(vec3(1.0, 1.0, 1.0));\n          float lightIntensity = max(0.2, dot(vNormal, lightDirection));\n          \n          vec3 color;\n          \n          if (isGaseous > 0.5) {\n            // Gas giant coloring\n            float bands = sin(vPosition.y * 8.0 + time * 0.1) * 0.5 + 0.5;\n            float storms = noise(vPosition * 3.0 + vec3(time * 0.1, 0.0, 0.0));\n            \n            color = mix(primaryColor, secondaryColor, bands);\n            color = mix(color, accentColor, smoothstep(0.6, 0.8, storms) * 0.3);\n            \n            // Add atmospheric glow\n            float fresnel = 1.0 - abs(dot(vNormal, vec3(0.0, 0.0, 1.0)));\n            color += primaryColor * fresnel * 0.2;\n          } else {\n            // Terrestrial coloring\n            float height = vElevation * 10.0 + 0.5;\n            float landmass = smoothstep(0.3, 0.7, height);\n            \n            // Water vs land\n            vec3 waterColor = primaryColor;\n            vec3 landColor = mix(secondaryColor, accentColor, smoothstep(0.5, 0.8, height));\n            \n            color = mix(waterColor, landColor, landmass);\n            \n            // Add biomass effects\n            if (biomass > 0.3 && temperature > 250.0 && temperature < 350.0) {\n              float vegetation = biomass * smoothstep(0.4, 0.6, height);\n              color = mix(color, vec3(0.2, 0.6, 0.2), vegetation * 0.5);\n            }\n            \n            // Add some variation\n            float variation = noise(vPosition * 5.0);\n            color = mix(color, accentColor, variation * 0.1);\n            \n            // Polar caps for terrestrial planets\n            float latitude = abs(vNormal.y);\n            if (mass > 0.5 && mass < 3.0 && temperature < 300.0) {\n              color = mix(color, vec3(0.9, 0.95, 1.0), smoothstep(0.8, 1.0, latitude) * 0.7);\n            }\n          }\n          \n          // Apply lighting\n          color *= lightIntensity;\n          \n          // Add rim lighting\n          float rimLight = 1.0 - max(0.0, dot(vNormal, vec3(0.0, 0.0, 1.0)));\n          color += rimLight * 0.1;\n          \n          gl_FragColor = vec4(color, 1.0);\n        }\n      `,\n    })\n  }, [safeConfig])\n\n  useFrame((state) => {\n    if (meshRef.current && (material instanceof THREE.ShaderMaterial)) {\n      meshRef.current.rotation.y += 0.002\n      if (material.uniforms.time) {\n        material.uniforms.time.value = state.clock.elapsedTime\n      }\n    }\n  })\n\n  // Don't render if we don't have a valid config\n  if (!safeConfig) {\n    return null\n  }\n\n  return (\n    <mesh ref={meshRef} scale={safeConfig.radius || 1}>\n      <sphereGeometry args={[1, 64, 64]} />\n      <primitive object={material} attach=\"material\" />\n    </mesh>\n  );\n};","\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"../../utils/utils\";\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n};","\n\nimport { useState, useEffect } from \"react\"\nimport type { PlanetConfig } from \"../utils/planet-config\"\nimport { getAutoType, simplePlanetPresets, getSimplifiedColors, updateFromSimplifiedColors } from \"../utils/planet-config\"\nimport { Slider } from \"./ui/slider\"\nimport { Label } from \"./ui/label\"\nimport { Button } from \"./ui/button\"\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"./ui/select\";\nimport { Download, Upload, RefreshCw } from \"lucide-react\"\nimport ColorPicker from \"./ColorPicker\"\n\ninterface SimplePlanetSettingsProps {\n  planetConfig: PlanetConfig\n  onChange: (config: Partial<PlanetConfig>) => void\n}\n\nexport default function SimplePlanetSettings({ planetConfig, onChange }: SimplePlanetSettingsProps) {\n  const [showImportExport, setShowImportExport] = useState(false)\n\n  // Auto-update planet type based on mass and radius\n  useEffect(() => {\n    const autoType = getAutoType(planetConfig.mass, planetConfig.radius)\n    if (autoType !== planetConfig.type) {\n      onChange({ type: autoType })\n    }\n  }, [planetConfig.mass, planetConfig.radius])\n\n  const regenerateSeed = () => {\n    onChange({ seed: Math.floor(Math.random() * 10000) })\n  }\n\n  const loadPreset = (presetName: string) => {\n    const preset = simplePlanetPresets[presetName]\n    if (preset) {\n      onChange(preset)\n    }\n  }\n\n  // Get simplified colors for the interface\n  const simplifiedColors = getSimplifiedColors(planetConfig)\n\n  const handleColorChange = (colorType: \"primary\" | \"secondary\" | \"accent\", color: string) => {\n    const newColors = { ...simplifiedColors, [colorType]: color }\n    const colorUpdate = updateFromSimplifiedColors(planetConfig, newColors)\n    onChange(colorUpdate)\n  }\n\n  const density = planetConfig.mass / ((planetConfig.radius ** 3 * Math.PI * 4) / 3)\n\n  return (\n    <div className=\"space-y-6 bg-slate-900 text-slate-100\">\n      <div className=\"flex justify-between items-center\">\n        <Button\n          variant=\"outline\"\n          size=\"sm\"\n          onClick={() => setShowImportExport(!showImportExport)}\n          className=\"flex items-center gap-2 bg-slate-800 text-slate-200 border-slate-700 hover:bg-slate-700\"\n        >\n          {showImportExport ? \"Hide\" : \"Show\"} Import/Export\n          {showImportExport ? <Download className=\"h-4 w-4\" /> : <Upload className=\"h-4 w-4\" />}\n        </Button>\n      </div>\n\n      {showImportExport && (\n        <div className=\"p-4 bg-slate-800 rounded-md space-y-4 border border-slate-700\">\n          <h3 className=\"text-sm font-medium text-slate-200\">Import/Export Configuration</h3>\n          <div className=\"flex gap-2\">\n            <Button\n              variant=\"secondary\"\n              size=\"sm\"\n              onClick={() => {\n                const event = new CustomEvent(\"open-simple-import-dialog\")\n                window.dispatchEvent(event)\n              }}\n              className=\"flex-1 bg-slate-700 text-slate-200 hover:bg-slate-600\"\n            >\n              Import\n            </Button>\n            <Button\n              variant=\"secondary\"\n              size=\"sm\"\n              onClick={() => {\n                const event = new CustomEvent(\"open-simple-export-dialog\")\n                window.dispatchEvent(event)\n              }}\n              className=\"flex-1 bg-slate-700 text-slate-200 hover:bg-slate-600\"\n            >\n              Export\n            </Button>\n          </div>\n        </div>\n      )}\n\n      {/* Presets */}\n      <div className=\"bg-slate-800 p-4 rounded-md border border-slate-700\">\n        <h3 className=\"text-sm font-medium mb-3 text-slate-200\">Presets</h3>\n        <Select onValueChange={loadPreset}>\n          <SelectTrigger className=\"bg-slate-700 border-slate-600\">\n            <SelectValue placeholder=\"Load a preset...\" />\n          </SelectTrigger>\n          <SelectContent>\n            <SelectItem value=\"earth\">Earth-like</SelectItem>\n            <SelectItem value=\"mars\">Mars-like</SelectItem>\n            <SelectItem value=\"venus\">Venus-like</SelectItem>\n            <SelectItem value=\"jupiter\">Jupiter-like</SelectItem>\n            <SelectItem value=\"neptune\">Neptune-like</SelectItem>\n          </SelectContent>\n        </Select>\n      </div>\n\n      {/* Planet Type */}\n      <div className=\"bg-slate-800 p-4 rounded-md border border-slate-700\">\n        <h3 className=\"text-sm font-medium mb-3 text-slate-200\">Planet Type</h3>\n        <div className=\"flex gap-2\">\n          <Button\n            variant={planetConfig.type === \"terrestrial\" ? \"default\" : \"outline\"}\n            size=\"sm\"\n            onClick={() => onChange({ type: \"terrestrial\" })}\n            className=\"flex-1\"\n          >\n            Terrestrial\n          </Button>\n          <Button\n            variant={planetConfig.type === \"gaseous\" ? \"default\" : \"outline\"}\n            size=\"sm\"\n            onClick={() => onChange({ type: \"gaseous\" })}\n            className=\"flex-1\"\n          >\n            Gaseous\n          </Button>\n        </div>\n        {(planetConfig.mass > 7.5 || planetConfig.radius > 2.5) && (\n          <p className=\"text-xs text-amber-400 mt-2\">Note: High mass or radius automatically sets this to gaseous</p>\n        )}\n      </div>\n\n      {/* Basic Properties */}\n      <div className=\"bg-slate-800 p-4 rounded-md space-y-4 border border-slate-700\">\n        <div className=\"flex justify-between items-center\">\n          <h3 className=\"text-sm font-medium text-slate-200\">Seed: {planetConfig.seed}</h3>\n          <Button variant=\"outline\" size=\"icon\" onClick={regenerateSeed} className=\"bg-slate-700 border-slate-600\">\n            <RefreshCw className=\"h-4 w-4\" />\n          </Button>\n        </div>\n\n        <div className=\"space-y-2\">\n          <div className=\"flex justify-between\">\n            <Label htmlFor=\"radius\" className=\"text-slate-200\">\n              Radius (Earth radii)\n            </Label>\n            <span className=\"text-sm text-slate-400\">{planetConfig.radius.toFixed(1)}</span>\n          </div>\n          <Slider\n            id=\"radius\"\n            min={0.3}\n            max={5}\n            step={0.1}\n            value={[planetConfig.radius]}\n            onValueChange={(value) => onChange({ radius: value[0] })}\n            className=\"[&_[role=slider]]:bg-slate-200\"\n          />\n        </div>\n\n        <div className=\"space-y-2\">\n          <div className=\"flex justify-between\">\n            <Label htmlFor=\"mass\" className=\"text-slate-200\">\n              Mass (Earth masses)\n            </Label>\n            <span className=\"text-sm text-slate-400\">{planetConfig.mass.toFixed(1)} Mâ</span>\n          </div>\n          <Slider\n            id=\"mass\"\n            min={0.1}\n            max={10}\n            step={0.1}\n            value={[planetConfig.mass]}\n            onValueChange={(value) => onChange({ mass: value[0] })}\n            className=\"[&_[role=slider]]:bg-slate-200\"\n          />\n        </div>\n\n        <div className=\"space-y-2\">\n          <div className=\"flex justify-between\">\n            <Label htmlFor=\"temperature\" className=\"text-slate-200\">\n              Temperature\n            </Label>\n            <span className=\"text-sm text-slate-400\">\n              {planetConfig.temperature.toFixed(0)}K ({(planetConfig.temperature - 273.15).toFixed(0)}Â°C)\n            </span>\n          </div>\n          <Slider\n            id=\"temperature\"\n            min={50}\n            max={700}\n            step={5}\n            value={[planetConfig.temperature]}\n            onValueChange={(value) => onChange({ temperature: value[0] })}\n            className=\"[&_[role=slider]]:bg-slate-200\"\n          />\n        </div>\n\n        <div className=\"space-y-2\">\n          <div className=\"flex justify-between\">\n            <Label htmlFor=\"biomass\" className=\"text-slate-200\">\n              Biomass\n            </Label>\n            <span className=\"text-sm text-slate-400\">{planetConfig.biomass.toFixed(2)}</span>\n          </div>\n          <Slider\n            id=\"biomass\"\n            min={0}\n            max={1}\n            step={0.1}\n            value={[planetConfig.biomass]}\n            onValueChange={(value) => onChange({ biomass: value[0] })}\n            className=\"[&_[role=slider]]:bg-slate-200\"\n          />\n        </div>\n\n        <div className=\"pt-2 border-t border-slate-700\">\n          <div className=\"flex justify-between\">\n            <Label className=\"text-slate-200\">Density</Label>\n            <span className=\"text-sm text-slate-400\">{density.toFixed(2)} g/cmÂ³</span>\n          </div>\n        </div>\n      </div>\n\n      {/* Simplified Colors */}\n      <div className=\"bg-slate-800 p-4 rounded-md space-y-4 border border-slate-700\">\n        <h3 className=\"text-sm font-medium text-slate-200\">Colors</h3>\n        <div className=\"space-y-4\">\n          <ColorPicker\n            label={planetConfig.type === \"gaseous\" ? \"Atmosphere\" : \"Ocean/Water\"}\n            color={simplifiedColors.primary}\n            onChange={(color) => handleColorChange(\"primary\", color)}\n          />\n          <ColorPicker\n            label={planetConfig.type === \"gaseous\" ? \"Bands\" : \"Land/Vegetation\"}\n            color={simplifiedColors.secondary}\n            onChange={(color) => handleColorChange(\"secondary\", color)}\n          />\n          <ColorPicker\n            label={planetConfig.type === \"gaseous\" ? \"Storms\" : \"Mountains/Highlands\"}\n            color={simplifiedColors.accent}\n            onChange={(color) => handleColorChange(\"accent\", color)}\n          />\n        </div>\n      </div>\n    </div>\n  )\n};","\n\nimport { useState } from \"react\"\nimport { Canvas } from \"@react-three/fiber\"\nimport { OrbitControls, Stars } from \"@react-three/drei\"\nimport { Cog } from \"lucide-react\"\nimport type { PlanetConfig } from \"../utils/planet-config\"\nimport SimplePlanetMesh from \"./SimplePlanetMesh\"\nimport SimplePlanetSettings from \"./SimplePlanetSettings\"\n\ninterface SimplePlanetViewerProps {\n  planetConfig: PlanetConfig\n  onConfigChange: (config: Partial<PlanetConfig>) => void\n}\n\nexport default function SimplePlanetViewer({ planetConfig, onConfigChange }: SimplePlanetViewerProps) {\n  const [showSettings, setShowSettings] = useState(false)\n\n  return (\n    <div className=\"w-full h-full bg-black relative\">\n      <Canvas camera={{ position: [0, 0, 5], fov: 45 }}>\n        <ambientLight intensity={0.3} />\n        <pointLight position={[10, 10, 10]} intensity={1.5} />\n        <SimplePlanetMesh config={planetConfig} />\n        <OrbitControls enablePan={true} enableZoom={true} enableRotate={true} minDistance={2} maxDistance={10} />\n        <Stars radius={100} depth={50} count={5000} factor={4} saturation={0} fade speed={1} />\n      </Canvas>\n\n      <button\n        onClick={() => setShowSettings(!showSettings)}\n        className=\"absolute top-4 right-4 bg-slate-800 p-2 rounded-full text-white hover:bg-slate-700 transition-colors z-10 border border-slate-700\"\n        aria-label=\"Toggle settings\"\n      >\n        <Cog className=\"w-6 h-6\" />\n      </button>\n\n      {showSettings && (\n        <div className=\"absolute top-0 right-0 w-full md:w-96 h-full bg-slate-900/95 text-white overflow-y-auto p-4 backdrop-blur-sm z-10 transition-all border-l border-slate-700\">\n          <div className=\"flex justify-between items-center mb-4\">\n            <h2 className=\"text-xl font-bold text-slate-100\">Simple Planet Settings</h2>\n            <button\n              onClick={() => setShowSettings(false)}\n              className=\"text-slate-300 hover:text-slate-100\"\n              aria-label=\"Close settings\"\n            >\n              <svg\n                xmlns=\"http://www.w3.org/2000/svg\"\n                width=\"24\"\n                height=\"24\"\n                viewBox=\"0 0 24 24\"\n                fill=\"none\"\n                stroke=\"currentColor\"\n                strokeWidth=\"2\"\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n              >\n                <line x1=\"18\" y1=\"6\" x2=\"6\" y2=\"18\"></line>\n                <line x1=\"6\" y1=\"6\" x2=\"18\" y2=\"18\"></line>\n              </svg>\n            </button>\n          </div>\n          <SimplePlanetSettings planetConfig={planetConfig} onChange={onConfigChange} />\n        </div>\n      )}\n    </div>\n  )\n};","\n\n// Base layer noise function\nexport function generateNoise(width: number, height: number, scale: number): number[][] {\n  const noise: number[][] = Array(width)\n    .fill(0)\n    .map(() => Array(height).fill(0))\n\n  for (let y = 0; y < height; y++) {\n    for (let x = 0; x < width; x++) {\n      const sampleX = x / scale\n      const sampleY = y / scale\n\n      let amplitude = 1\n      let frequency = 1\n      let noiseHeight = 0\n\n      // Add multiple octaves of noise\n      for (let i = 0; i < 4; i++) {\n        const perlinValue = Math.sin(sampleX * frequency) * Math.cos(sampleY * frequency)\n        noiseHeight += perlinValue * amplitude\n\n        amplitude *= 0.5\n        frequency *= 2\n      }\n\n      noise[x][y] = noiseHeight\n    }\n  }\n\n  return noise\n}\n\n// Secondary layer - Simplex noise implementation\nexport function generateSimpleNoise(seed: number, persistence: number) {\n  // Simple pseudo-random number generator with seed\n  const random = (x: number, y: number, z: number) => {\n    const dot = x * 12.9898 + y * 78.233 + z * 37.719\n    const value = Math.sin(dot * seed) * 43758.5453\n    return value - Math.floor(value)\n  }\n\n  // Simple 3D noise function\n  return (x: number, y: number, z: number) => {\n    // Get integer and fractional parts\n    const xi = Math.floor(x)\n    const yi = Math.floor(y)\n    const zi = Math.floor(z)\n    const xf = x - xi\n    const yf = y - yi\n    const zf = z - zi\n\n    // Interpolate between grid points\n    let value = 0\n    for (let dx = 0; dx <= 1; dx++) {\n      for (let dy = 0; dy <= 1; dy++) {\n        for (let dz = 0; dz <= 1; dz++) {\n          const weight = (1 - Math.abs(dx - xf)) * (1 - Math.abs(dy - yf)) * (1 - Math.abs(dz - zf))\n          const sample = random(xi + dx, yi + dy, zi + dz)\n          value += sample * weight\n        }\n      }\n    }\n\n    return value * 2 - 1 // Map to [-1, 1]\n  }\n}\n\n// More complex Perlin noise implementation\nexport function generatePerlinNoise(seed: number, octaves: number, persistence: number, lacunarity: number) {\n  const simpleNoise = generateSimpleNoise(seed, persistence)\n\n  return (x: number, y: number, z: number) => {\n    let total = 0\n    let frequency = 1\n    let amplitude = 1\n    let maxValue = 0\n\n    for (let i = 0; i < octaves; i++) {\n      total += simpleNoise(x * frequency, y * frequency, z * frequency) * amplitude\n      maxValue += amplitude\n      amplitude *= persistence\n      frequency *= lacunarity\n    }\n\n    return total / maxValue\n  }\n}\n\n// Add Math.seedrandom for deterministic random number generation\n// This is a simplified version for the example\ndeclare global {\n  interface Math {\n    seedrandom: (seed: string) => () => number\n  }\n}\n\n// Simple implementation of seedrandom\nMath.seedrandom = (seed: string) => {\n  let state = 0\n  for (let i = 0; i < seed.length; i++) {\n    state = (state * 31 + seed.charCodeAt(i)) & 0xffffffff\n  }\n\n  // Return a function that generates random numbers based on the seed\n  return () => {\n    state = (state * 1664525 + 1013904223) & 0xffffffff\n    return state / 0xffffffff\n  }\n}"],"names":["_jsxs","_jsx"],"mappings":"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"}