export declare const vertexShader = "\n  varying vec2 vUv;\n  varying vec3 vNormal;\n  varying vec3 vPosition;\n  varying float vElevation;\n  varying vec3 vOrigPosition;\n  \n  uniform float time;\n  uniform float surfaceRoughness;\n  uniform float volcanicActivity;\n  uniform float isGaseous;\n  uniform float seed;\n  uniform float continentSize;\n  uniform float continentCount;\n  uniform float noiseScale;\n  \n  // Simplex 3D Noise\n  vec4 permute(vec4 x){return mod(((x*34.0)+1.0)*x, 289.0);}\n  vec4 taylorInvSqrt(vec4 r){return 1.79284291400159 - 0.85373472095314 * r;}\n\n  float snoise(vec3 v){ \n    const vec2 C = vec2(1.0/6.0, 1.0/3.0);\n    const vec4 D = vec4(0.0, 0.5, 1.0, 2.0);\n\n    vec3 i = floor(v + dot(v, C.yyy));\n    vec3 x0 = v - i + dot(i, C.xxx);\n\n    vec3 g = step(x0.yzx, x0.xyz);\n    vec3 l = 1.0 - g;\n    vec3 i1 = min(g.xyz, l.zxy);\n    vec3 i2 = max(g.xyz, l.zxy);\n\n    vec3 x1 = x0 - i1 + 1.0 * C.xxx;\n    vec3 x2 = x0 - i2 + 2.0 * C.xxx;\n    vec3 x3 = x0 - 1. + 3.0 * C.xxx;\n\n    i = mod(i, 289.0); \n    vec4 p = permute(permute(permute( \n              i.z + vec4(0.0, i1.z, i2.z, 1.0))\n            + i.y + vec4(0.0, i1.y, i2.y, 1.0)) \n            + i.x + vec4(0.0, i1.x, i2.x, 1.0));\n\n    float n_ = 1.0/7.0;\n    vec3 ns = n_ * D.wyz - D.xzx;\n\n    vec4 j = p - 49.0 * floor(p * ns.z *ns.z);\n\n    vec4 x_ = floor(j * ns.z);\n    vec4 y_ = floor(j - 7.0 * x_);\n\n    vec4 x = x_ *ns.x + ns.yyyy;\n    vec4 y = y_ *ns.x + ns.yyyy;\n    vec4 h = 1.0 - abs(x) - abs(y);\n\n    vec4 b0 = vec4(x.xy, y.xy);\n    vec4 b1 = vec4(x.zw, y.zw);\n\n    vec4 s0 = floor(b0)*2.0 + 1.0;\n    vec4 s1 = floor(b1)*2.0 + 1.0;\n    vec4 sh = -step(h, vec4(0.0));\n\n    vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy;\n    vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww;\n\n    vec3 p0 = vec3(a0.xy,h.x);\n    vec3 p1 = vec3(a0.zw,h.y);\n    vec3 p2 = vec3(a1.xy,h.z);\n    vec3 p3 = vec3(a1.zw,h.w);\n\n    vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n    p0 *= norm.x;\n    p1 *= norm.y;\n    p2 *= norm.z;\n    p3 *= norm.w;\n\n    vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n    m = m * m;\n    return 42.0 * dot(m*m, vec4(dot(p0,x0), dot(p1,x1), dot(p2,x2), dot(p3,x3)));\n  }\n\n  // Fractal Brownian Motion\n  float fbm(vec3 p, int octaves) {\n    float value = 0.0;\n    float amplitude = 1.0;\n    float frequency = 1.0;\n    float persistence = 0.5;\n    \n    // Use a fixed seed for terrain to keep it static\n    vec3 fixedPos = p + vec3(seed * 0.01);\n    \n    for (int i = 0; i < octaves; i++) {\n      if (i >= octaves) break;\n      value += amplitude * snoise(fixedPos * frequency);\n      amplitude *= persistence;\n      frequency *= 2.0;\n    }\n    \n    return value;\n  }\n\n  // Generate continent mask\n  float generateContinents(vec3 position) {\n    // Use the seed to create different continent patterns\n    vec3 seedOffset = vec3(seed * 0.1, seed * 0.2, seed * 0.3);\n    \n    // Base continent noise\n    float continentNoise = 0.0;\n    \n    // Generate multiple continent centers\n    for (float i = 0.0; i < 10.0; i++) {\n      if (i >= continentCount) break;\n      \n      // Create a unique position for each continent center\n      float angle1 = (i / continentCount) * 6.28 + seed * 0.1;\n      float angle2 = (i / continentCount) * 3.14 + seed * 0.2;\n      \n      vec3 continentCenter = vec3(\n        sin(angle1) * cos(angle2),\n        sin(angle1) * sin(angle2),\n        cos(angle1)\n      );\n      \n      // Distance to continent center\n      float dist = distance(position, continentCenter);\n      \n      // Continent shape with some noise\n      float continentShape = smoothstep(continentSize, 0.0, dist);\n      \n      // Add some noise to the continent edges\n      float edgeNoise = fbm(position * 2.0 + seedOffset + continentCenter, 3) * 0.5;\n      \n      // Combine\n      continentNoise = max(continentNoise, continentShape + edgeNoise * 0.3);\n    }\n    \n    // Add some small islands\n    float islandNoise = fbm(position * 3.0 + seedOffset, 4) * 0.3;\n    \n    return clamp(continentNoise + islandNoise * 0.3, 0.0, 1.0);\n  }\n\n  // Enhanced texture detail function\n  float getTextureDetail(vec3 position, float scale) {\n    return fbm(position * scale, 3) * 0.05;\n  }\n\n  void main() {\n    vUv = uv;\n    vNormal = normal;\n    vPosition = position;\n    vOrigPosition = position;\n    \n    vec3 pos = position;\n    float elevation = 0.0;\n    \n    if (isGaseous > 0.5) {\n      // Gas giant features - keep these animated\n      float bands = sin(pos.y * 10.0 + time * 0.1) * 0.5;\n      float storms = snoise(pos * vec3(2.0, 8.0, 2.0) + time * 0.15) * 0.5;\n      float cyclones = snoise(pos * vec3(4.0, 1.0, 4.0) + time * 0.05) * 0.25;\n      \n      // Add more detailed texture to gas giants\n      float gasDetail = getTextureDetail(pos * 10.0, 20.0);\n      \n      elevation = mix(bands, storms, 0.5) + cyclones + gasDetail;\n      elevation *= 0.05; // Reduced distortion for gas giants\n    } else {\n      // Generate continent mask\n      float continentMask = generateContinents(normalize(position));\n      \n      // Generate detailed terrain only on continents\n      float detailedTerrain = fbm(position * surfaceRoughness * noiseScale + vec3(seed), 5) * 0.5;\n      \n      // Add more micro-detail to terrain\n      float microDetail = getTextureDetail(position * 50.0 * noiseScale, 100.0);\n      detailedTerrain += microDetail;\n      \n      // Apply the continent mask to the terrain\n      float maskedTerrain = detailedTerrain * continentMask;\n      \n      // Add some base terrain for underwater features\n      float baseTerrain = fbm(position * 0.5 * noiseScale + vec3(seed * 2.0), 3) * 0.02;\n      \n      // Add volcanic features\n      float volcanic = 0.0;\n      if (volcanicActivity > 0.0) {\n        volcanic = pow(fbm(position * 8.0 * noiseScale + vec3(seed * 3.0), 2), 3.0) * volcanicActivity * continentMask;\n      }\n      \n      // Add ridges and cracks to terrain\n      float ridges = 1.0 - abs(fbm(position * 12.0 * noiseScale + vec3(seed * 4.0), 3));\n      ridges = pow(ridges, 3.0) * 0.15 * continentMask;\n      \n      // Combine all terrain features\n      elevation = maskedTerrain * 0.15 + baseTerrain + volcanic * 0.1 + ridges * 0.05;\n      \n      // Make sure continents have a minimum height\n      elevation = mix(baseTerrain, elevation, continentMask);\n    }\n    \n    vElevation = elevation;\n    \n    // Apply displacement\n    pos += normal * elevation;\n    \n    gl_Position = projectionMatrix * modelViewMatrix * vec4(pos, 1.0);\n  }\n";
